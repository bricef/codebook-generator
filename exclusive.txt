
# Web service

```python
# this is app.py

import os
import random
import argparse
import urlparse

import requests
import psycopg2
import bottle
from bottle import route, run, template, static_file, request, post, response

bottle.BaseRequest.MEMFILE_MAX = 10000000 #(10M)

app = bottle.Bottle()

urlparse.uses_netloc.append("postgres")
# The Database URl is loaded as an Environment variable
url = urlparse.urlparse(os.environ["DATABASE_URL"])

conn = psycopg2.connect(
    database=url.path[1:],
    user=url.username,
    password=url.password,
    host=url.hostname,
    port=url.port
)


def setup_database():
  print("[INFO]: Setting up database")
  cursor = conn.cursor()
  cursor.execute("""
    CREATE TABLE IF NOT EXISTS visualisations (
      id serial PRIMARY KEY, 
      svg text
    )
  """)



@app.route('/')
def home():
  return static_file("./index.html", root="./Session2/")

@app.route('/hello/<name>')
def index(name):
    return template('<b>Hello {{name}}</b>!', name=name)
  
@app.route('/api/random-test')
def random_test():
  return {'value': random.random()}

@app.post('/api/anon-search')
def anon_search():
  url_to_be_fetched = request.forms.get('url')
  reply = requests.get(url_to_be_fetched)
  return {
    'status': 'OK',
    'url': url_to_be_fetched,
    'content': reply.text
  }

@app.route('/static/<pathname>')
def home(pathname):
  return static_file(pathname, root="./Session2/static")

@app.post('/api/save/visualisation')
def savevisu():
  print("Saving visualisation...")
  svg_data = request.body.getvalue()
  print("    Received SVG data: %d bytes"%len(svg_data) )
  cursor = conn.cursor()
  cursor.execute("INSERT INTO visualisations (svg) VALUES (%s) ", (svg_data,) )
  conn.commit()
  print("    Transaction committed." )
  return {'status': 'OK'}

@app.route('/api/vis-gallery')
def showvizs():
  cursor = conn.cursor()
  cursor.execute("SELECT * FROM visualisations;")
  visualisations = [r[1] for r in  cursor.fetchmany(30)]
  return { 
    "status": "OK",
    "visualisations": visualisations,
    "count": len(visualisations)
  }

def gen_results(num):
  return [{'weight':random.random(), 'personalisation':random.random() } for x in range(num)]

def item_weight(item):
  return item['weight']

def item_personalisation(item):
  return item['personalisation']

@app.route('/api/search')
def search():
  query = request.query.get('query')
  return {
    'query': query,
    'sorted_items': sorted(gen_results(100), key=item_personalisation)
  }

if __name__ == "__main__":
  parser = argparse.ArgumentParser(description='Process some integers.')
  parser.add_argument('--port', metavar='PORT', type=int, help='Port to serve on')
  parser.add_argument('--setup', help="Setup database")
  args = parser.parse_args()

  if args.setup and os.environ.get("DATABASE_URL"):
    setup_database()

  port = None
  if os.environ.get('PORT'):
    port = os.environ.get('PORT')
  elif args.port:
    port = args.port
  else:
    raise Exception("Port not configured!")

  app.run(host='0.0.0.0', port=port)
```

# Creating this document

## Utilities

```shell
#!/bin/bash

YELLOW="\033[1;33m"
RED="\033[1;31m"
NC="\033[0m"

function speakout {
  echo -e "$@"
}

function speakerr {
  echo -e "$@" 1>&2
}

function log {
  echo -e "$@" >> $LOG
}


function to_base_name {
	local FILE="$1"
	if [[ "$OS" == "Windows_NT" ]]; then
    	BASE_NAME="$(basename "$(cygpath "$FILE")")"
  	else
    	BASE_NAME="$(basename "$FILE")"
  	fi
  	echo "$BASE_NAME"
}#!/bin/bash

#set -x

command -v pandoc > /dev/null 2>&1 || { echo "This script requires pandoc to run."; exit 1; }
command -v latex > /dev/null 2>&1 || { echo "This script requires latex to run."; exit 1; }

source common.sh

LATEX_HEADER="./resources/setup.tex"
BUILD_DIR="build"
MUSTACHE_COMMAND="./resources/mustache.py"

if [ ! -d "$BUILD_DIR" ]; then
  mkdir -p "$BUILD_DIR"
fi
function file_exist_overwrite {
  local FILE="$1"
  speakout "${YELLOW}File '$FILE' already exists in build directory.\nDo you want to overwrite?\n(y:Yes once) (n: No once) (Y:Yes to all) (N:No to all) (Q:Exit now)${NC}"
  read CHOICE

  case "$CHOICE" in 
    y)
      return 0
      ;;
    n)
      return 1
      ;;
    Y)
      OVERWRITE_ALL=true
      return 0
      ;;
    N)
      DONT_OVERWRITE=true
      return 1
      ;;
    Q)
      exit 0
      ;;
    *)
      file_exist_overwrite "$FILE"
  esac
}




function file_to_listing {
	local FILE="$1"
	if [[ "$OS" == "Windows_NT" ]]; then
	    FILE=$(cygpath "$FILE")
	fi
	local BASE="$(to_base_name "$FILE")"
	local TARGET="$2"
	local SECTION=$(echo "$BASE" | sed 's/\([A-Z]*\)[0-9]*[a-z]* -.*/Section \1/')
	local TITLE=$(echo "$BASE" | sed 's/.*- \(.*\)\..*/\1/')
  	local DATA="{\"section\":\"$SECTION\", \"title\":\"$TITLE\"}"
  	local HEADERS_SETUP="${BUILD_DIR}/${BASE}.setup"
	$MUSTACHE_COMMAND <(echo "$DATA") "$LATEX_HEADER" > "$HEADERS_SETUP" 
	dos2unix < "$FILE"\
	| cat <(echo -e '```CSharp\n') - <(echo -e '\n```\n') \
    | pandoc -s --listings -H "$HEADERS_SETUP" -f markdown -t latex -o "$TARGET"  
}

function process_file {
	local FILE="$1"
	if [[ "$OS" == "Windows_NT" ]]; then
		BASE_NAME="$(basename "$(cygpath "$FILE")")"
	else
		BASE_NAME="$(basename "$FILE")"
	fi
	
	TARGET_FILE="${BUILD_DIR}/${BASE_NAME}.pdf"

	if [[ -f "$TARGET_FILE" ]]; then 
		if [[ "$OVERWRITE_ALL" == true ]]; then 
	  		speakout "${RED}Overwriting '$TARGET_FILE'${NC}"
	  		file_to_listing "$FILE" "$TARGET_FILE"
		elif [[ "$DONT_OVERWRITE" == true ]]; then
	  		speakout "${RED}Skipping '$FILE'${NC}"
		else
	  		if file_exist_overwrite "$TARGET_FILE"; then
	    		speakout "${RED}Overwriting '$TARGET_FILE'${NC}"
	    		file_to_listing "$FILE" "$TARGET_FILE"
	  		else
	    		speakout "${RED}Skipping '$FILE'${NC}"
	  		fi
		fi
	else
		speakout "Processing '$FILE'"
		file_to_listing "$FILE" "$TARGET_FILE"
	fi
}

total=$#
current=1
speakout "Begin processing. $total files to process"
while (( "$#" )); do
  speakout "[ $current of $total ]"
  IN_FILE="$1"
  process_file "$IN_FILE"
  ((current++))
  shift 
done
```

## Creating the pdf
```shell
#!/bin/bash

#set -x

command -v pandoc > /dev/null 2>&1 || { echo "This script requires pandoc to run."; exit 1; }
command -v latex > /dev/null 2>&1 || { echo "This script requires latex to run."; exit 1; }

source common.sh

LATEX_TEMPLATE="./resources/notes-template.tex"
BUILD_DIR="build"
MUSTACHE_COMMAND="./resources/mustache.py"

if [ ! -d "$BUILD_DIR" ]; then
  mkdir -p "$BUILD_DIR"
fi
function file_exist_overwrite {
  local FILE="$1"
  speakout "${YELLOW}File '$FILE' already exists in build directory.\nDo you want to overwrite?\n(y:Yes once) (n: No once) (Y:Yes to all) (N:No to all) (Q:Exit now)${NC}"
  read CHOICE

  case "$CHOICE" in 
    y)
      return 0
      ;;
    n)
      return 1
      ;;
    Y)
      OVERWRITE_ALL=true
      return 0
      ;;
    N)
      DONT_OVERWRITE=true
      return 1
      ;;
    Q)
      exit 0
      ;;
    *)
      file_exist_overwrite "$FILE"
  esac
}




function notes_to_pdf {
	local FILE="$1"
	if [[ "$OS" == "Windows_NT" ]]; then
	    FILE=$(cygpath "$FILE")
	fi
	local TARGET="$2"

	dos2unix < "$FILE" | $MUSTACHE_COMMAND | pandoc -s --listings --template="$LATEX_TEMPLATE" -f markdown -t latex -o "$TARGET"  
}

function process_file {
	local FILE="$1"
	if [[ "$OS" == "Windows_NT" ]]; then
		BASE_NAME="$(basename "$(cygpath "$FILE")")"
	else
		BASE_NAME="$(basename "$FILE")"
	fi
	
	TARGET_FILE="${BUILD_DIR}/${BASE_NAME}.pdf"

	if [[ -f "$TARGET_FILE" ]]; then 
		if [[ "$OVERWRITE_ALL" == true ]]; then 
	  		speakout "${RED}Overwriting '$TARGET_FILE'${NC}"
	  		notes_to_pdf "$FILE" "$TARGET_FILE"
		elif [[ "$DONT_OVERWRITE" == true ]]; then
	  		speakout "${RED}Skipping '$FILE'${NC}"
		else
	  		if file_exist_overwrite "$TARGET_FILE"; then
	    		speakout "${RED}Overwriting '$TARGET_FILE'${NC}"
	    		notes_to_pdf "$FILE" "$TARGET_FILE"
	  		else
	    		speakout "${RED}Skipping '$FILE'${NC}"
	  		fi
		fi
	else
		speakout "Processing '$FILE'"
		notes_to_pdf "$FILE" "$TARGET_FILE"
	fi
}

total=$#
current=1
speakout "Begin processing. $total files to process"
while (( "$#" )); do
  speakout "[ $current of $total ]"
  IN_FILE="$1"
  process_file "$IN_FILE"
  ((current++))
  shift 
done
```

# File Conversion

```python
#!/usr/bin/env python3
import pystache
import sys
import argparse
import json

usage = """
mustache.py data.json template.mustache > output.txt
"""

parser = argparse.ArgumentParser(description="process a mustache template with some json data")
parser.add_argument("--data", metavar="data.json", help="The data file in JSON format")
parser.add_argument("--template", metavar="template.mustache", help="The template file in Mustache format")

args = parser.parse_args()

def lambda_compare_boo(text):
	csh,boo = map(lambda x: x.strip(), text.split('{{---}}'))
	return "\n".join([
		"\\begin{minipage}{\\textwidth}",
		"\\begin{minipage}[t]{245pt}",
		"\\begin{lstlisting}[language=CSharp,caption=C\#]",
		csh,
		"\end{lstlisting}\end{minipage}\hfill",
		"\\begin{minipage}[t]{245pt}",
		"\\begin{lstlisting}[language=Python,caption=Boo]",
		boo,
		"\end{lstlisting}\end{minipage}",
		"\end{minipage}"
	])

def lambda_compare_us(text):
	csh,boo = map(lambda x: x.strip(), text.split('{{---}}'))
	return "\n".join([
		"\\begin{minipage}{\\textwidth}",
		"\\begin{minipage}[t]{245pt}",
		"\\begin{lstlisting}[language=CSharp,caption=C\#]",
		csh,
		"\end{lstlisting}\end{minipage}\hfill",
		"\\begin{minipage}[t]{245pt}",
		"\\begin{lstlisting}[language=Javascript,caption=UnityScript]",
		boo,
		"\end{lstlisting}\end{minipage}",
		"\end{minipage}"
	])

lambdas = {
	'compare_boo': lambda_compare_boo,
	'compare_us': lambda_compare_us,
}

def main():
	renderer = pystache.Renderer()

	data = {}
	if args.data: 
		with open(args.data) as df:
			data = json.load(df)

	template = ""
	if args.template: 
		with open(args.template) as tf:
			data = tf.read()
	else:
		template = sys.stdin.read()


	sys.stdout.write(renderer.render(template, data, lambdas))

if __name__ == "__main__":
	main()
```

## Template

```tex
\documentclass[$if(fontsize)$$fontsize$,$endif$$if(lang)$$lang$,$endif$$if(papersize)$$papersize$,$endif$$for(classoption)$$classoption$$sep$,$endfor$]{$documentclass$}
$if(fontfamily)$
\usepackage{$fontfamily$}
$else$
\usepackage{lmodern}
$endif$
$if(linestretch)$
\usepackage{setspace}
\setstretch{$linestretch$}
$endif$
\usepackage{amssymb,amsmath}
\usepackage{ifxetex,ifluatex}
\usepackage{fixltx2e} % provides \textsubscript
\ifnum 0\ifxetex 1\fi\ifluatex 1\fi=0 % if pdftex
  \usepackage[T1]{fontenc}
  \usepackage[utf8]{inputenc}
$if(euro)$
  \usepackage{eurosym}
$endif$
\else % if luatex or xelatex
  \ifxetex
    \usepackage{mathspec}
    \usepackage{xltxtra,xunicode}
  \else
    \usepackage{fontspec}
  \fi
  \defaultfontfeatures{Mapping=tex-text,Scale=MatchLowercase}
  \newcommand{\euro}{€}
$if(mainfont)$
    \setmainfont{$mainfont$}
$endif$
$if(sansfont)$
    \setsansfont{$sansfont$}
$endif$
$if(monofont)$
    \setmonofont[Mapping=tex-ansi]{$monofont$}
$endif$
$if(mathfont)$
    \setmathfont(Digits,Latin,Greek){$mathfont$}
$endif$
\fi
% use upquote if available, for straight quotes in verbatim environments
\IfFileExists{upquote.sty}{\usepackage{upquote}}{}
% use microtype if available
\IfFileExists{microtype.sty}{\usepackage{microtype}}{}
$if(geometry)$
\usepackage[$for(geometry)$$geometry$$sep$,$endfor$]{geometry}
$endif$
$if(natbib)$
\usepackage{natbib}
\bibliographystyle{$if(biblio-style)$$biblio-style$$else$plainnat$endif$}
$endif$
$if(biblatex)$
\usepackage{biblatex}
$if(biblio-files)$
\bibliography{$biblio-files$}
$endif$
$endif$
$if(listings)$
\usepackage{listings}
$endif$
$if(lhs)$
\lstnewenvironment{code}{\lstset{language=Haskell,basicstyle=\small\ttfamily}}{}
$endif$
$if(highlighting-macros)$
$highlighting-macros$
$endif$
$if(verbatim-in-note)$
\usepackage{fancyvrb}
$endif$
$if(tables)$
\usepackage{longtable,booktabs}
$endif$
$if(graphics)$
\usepackage{graphicx}
\makeatletter
\def\maxwidth{\ifdim\Gin@nat@width>\linewidth\linewidth\else\Gin@nat@width\fi}
\def\maxheight{\ifdim\Gin@nat@height>\textheight\textheight\else\Gin@nat@height\fi}
\makeatother
% Scale images if necessary, so that they will not overflow the page
% margins by default, and it is still possible to overwrite the defaults
% using explicit options in \includegraphics[width, height, ...]{}
\setkeys{Gin}{width=\maxwidth,height=\maxheight,keepaspectratio}
$endif$
\ifxetex
  \usepackage[setpagesize=false, % page size defined by xetex
              unicode=false, % unicode breaks when used with xetex
              xetex]{hyperref}
\else
  \usepackage[unicode=true]{hyperref}
\fi
\hypersetup{breaklinks=true,
            bookmarks=true,
            pdfauthor={$author-meta$},
            pdftitle={$title-meta$},
            colorlinks=true,
            citecolor=$if(citecolor)$$citecolor$$else$blue$endif$,
            urlcolor=$if(urlcolor)$$urlcolor$$else$blue$endif$,
            linkcolor=$if(linkcolor)$$linkcolor$$else$magenta$endif$,
            pdfborder={0 0 0}}
\urlstyle{same}  % don't use monospace font for urls
$if(links-as-notes)$
% Make links footnotes instead of hotlinks:
\renewcommand{\href}[2]{#2\footnote{\url{#1}}}
$endif$
$if(strikeout)$
\usepackage[normalem]{ulem}
% avoid problems with \sout in headers with hyperref:
\pdfstringdefDisableCommands{\renewcommand{\sout}{}}
$endif$
\setlength{\parindent}{0pt}
\setlength{\parskip}{6pt plus 2pt minus 1pt}
\setlength{\emergencystretch}{3em}  % prevent overfull lines
$if(numbersections)$
\setcounter{secnumdepth}{5}
$else$
\setcounter{secnumdepth}{0}
$endif$
$if(verbatim-in-note)$
\VerbatimFootnotes % allows verbatim text in footnotes
$endif$
$if(lang)$
\ifxetex
  \usepackage{polyglossia}
  \setmainlanguage{$mainlang$}
\else
  \usepackage[$lang$]{babel}
\fi
$endif$

$if(title)$
\title{$title$$if(subtitle)$\\\vspace{0.5em}{\large $subtitle$}$endif$}
$endif$
$if(author)$
\author{$for(author)$$author$$sep$ \and $endfor$}
$endif$
\date{$date$}

\usepackage[left=2cm,right=2cm,top=2cm,bottom=2cm]{geometry}
\usepackage{pagecolor}
\usepackage[T1]{fontenc}
\usepackage[scaled]{beramono}
\usepackage{color}
\usepackage{parcolumns}

\DeclareUnicodeCharacter{00A0}{ }

\definecolor{grey}{RGB}{248,248,248}
\definecolor{bluekeywords}{rgb}{0.13,0.13,1}
\definecolor{greencomments}{rgb}{0,0.5,0}
\definecolor{redstrings}{rgb}{0.9,0,0}
\definecolor{light-gray}{gray}{0.95}

\pagenumbering{gobble}

\pagecolor{grey}

\lstdefinelanguage{CSharp}
{
sensitive=true,
morekeywords=[1]{
abstract, as, base, break, case,
catch, checked, class, const, continue,
default, delegate, do, else, enum,
event, explicit, extern, false,
finally, fixed, for, foreach, goto, if,
implicit, in, interface, internal, is,
lock, namespace, new, null, operator,
out, override, params, private,
protected, public, readonly, ref,
return, sealed, sizeof, stackalloc,
static, struct, switch, this, throw,
true, try, typeof, unchecked, unsafe,
using, virtual, volatile, while, bool,
byte, char, decimal, double, float,
int, lock, object, sbyte, short, string,
uint, ulong, ushort, void},
morecomment=[l]{//},
morecomment=[s]{/*}{*/},
morecomment=[l][keywordstyle4]{\#},
morestring=[b]",
morestring=[b]',
}

\lstset{language=CSharp,
showspaces=false,
showtabs=false,
breaklines=true,
breakatwhitespace=true,
breakautoindent=true,
showstringspaces=false,
escapeinside={(*@}{@*)},
%numbers=left,
%numberstyle=\footnotesize\ttfamily,
%stepnumber=1,
%numbersep=5pt,
linewidth=\linewidth,
%basewidth=0.5em,
commentstyle=\color{greencomments}\itshape,
keywordstyle=\color{bluekeywords}\bfseries,
stringstyle=\color{redstrings},
basicstyle=\ttfamily,
inputencoding=latin1,
backgroundcolor=\color{light-gray},
framesep=5pt,frame=tblr,framerule=0pt,
xleftmargin=5pt,xrightmargin=5pt
}

\usepackage{caption}
\DeclareCaptionFont{white}{\color{white}}
\DeclareCaptionFormat{listing}{\colorbox{gray}{\parbox{\dimexpr\linewidth-6pt\relax}{#3}}}
\captionsetup[lstlisting]{format=listing,labelfont=white,textfont=white}

\usepackage{fancyhdr}
\renewcommand{\footrulewidth}{0.4pt}% default is 0pt
\pagestyle{fancy}
\fancyhf{}
%\rhead{ {{section}} }
\lhead{ $title$ }
\cfoot{Learn more at \url{www.CompleteUnityDeveloper.com}}


\begin{document}

$for(include-before)$
$include-before$

$endfor$
$if(toc)$
{
\hypersetup{linkcolor=black}
\setcounter{tocdepth}{$toc-depth$}
\tableofcontents
}
$endif$
$if(lot)$
\listoftables
$endif$
$if(lof)$
\listoffigures
$endif$
$body$

$if(natbib)$
$if(biblio-files)$
$if(biblio-title)$
$if(book-class)$
\renewcommand\bibname{$biblio-title$}
$else$
\renewcommand\refname{$biblio-title$}
$endif$
$endif$
\bibliography{$biblio-files$}

$endif$
$endif$
$if(biblatex)$
\printbibliography$if(biblio-title)$[title=$biblio-title$]$endif$

$endif$
$for(include-after)$
$include-after$

$endfor$
\end{document}
\usepackage[left=1cm,right=1cm,top=0.75in,bottom=0.75in]{geometry}
\usepackage{pagecolor}
\usepackage[T1]{fontenc}
\usepackage[scaled]{beramono}
\usepackage{color}

\DeclareUnicodeCharacter{00A0}{ }

\definecolor{grey}{RGB}{248,248,248}
\definecolor{bluekeywords}{rgb}{0.13,0.13,1}
\definecolor{greencomments}{rgb}{0,0.5,0}
\definecolor{redstrings}{rgb}{0.9,0,0}

\pagenumbering{gobble}

\pagecolor{grey}

\lstset{language=[Sharp]C,
showspaces=false,
showtabs=false,
breaklines=true,
breakatwhitespace=true,
breakautoindent=true,
showstringspaces=false,
escapeinside={(*@}{@*)},
%numbers=left,
%numberstyle=\footnotesize\ttfamily,
%stepnumber=1,
%numbersep=5pt,
linewidth=\textwidth,
basewidth=0.5em,
backgroundcolor=\color{grey},
commentstyle=\color{greencomments}\itshape,
keywordstyle=\color{bluekeywords}\bfseries,
stringstyle=\color{redstrings},
basicstyle=\ttfamily,
inputencoding=latin1
}


\usepackage{fancyhdr}
 
\pagestyle{fancy}
\fancyhf{}
\rhead{ {{section}} }
\lhead{ {{title}} }
\cfoot{Find more at \url{www.CompleteUnityDeveloper.com}}
```

# Styling the extension

```css
* {
    box-sizing: border-box;
}

html {
    width: 100%;
    height: 100%;
}

body, html {
    margin: 0px;
    padding: 0px;
    width: 100%;
    height: 100%;
    color: white;
    background-color: white;
    font-family: "PlainMedium", Helvetica, Arial, sans-serif;
    -webkit-text-size-adjust: 100%;
    -ms-text-size-adjust: 100%;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    text-rendering: optimizeLegibility;
    font-feature-settings: "kern";
    font-kerning: normal;
}

button {
	font-family: "PlainMedium", Helvetica, Arial, sans-serif;
    -webkit-text-size-adjust: 100%;
    -ms-text-size-adjust: 100%;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    text-rendering: optimizeLegibility;
    font-feature-settings: "kern";
    font-kerning: normal;
  -webkit-border-radius: 7px;
  -moz-border-radius: 7px;
  border-radius: 7px;
  color: #979797;
  font-size: 16px;
  background: #ffffff;
  padding-top: 5px;
  padding-bottom: 6px;
  padding-left: 15px;
  padding-right: 15px;
  border: solid #e1e1e1 1px;
  text-decoration: none;
  -webkit-transition: all 0.3s linear;
-moz-transition: all 0.3s linear;
-o-transition: all 0.3s linear;
transition: all 0.3s linear;
text-decoration: none;
margin-right: 7px;
letter-spacing: 0.05px;

}

button:hover {
  background: #ffccff;
  text-decoration: none;

}

button:focus {outline:0;}

.ordering {
	padding-top: 10px;
	}
.overflow-scrolling span {
	color: #979797;
	margin-right: 7px;
	}

#bubble-chart {
    font-size: 12px;
    letter-spacing: 0.02em;
    }

#tech-links {
    border-radius: 3px;
    background-color: rgba(0,0,0,0.5);
    position: fixed;
    bottom: 0px;
    width: 80%;
    left: 10%;
    text-align: center;
    color: white;
    z-index: 5;
}

.report-headings {
    font-size: 16px;
    display: table-cell;
    vertical-align: middle;
    line-height: 1.2;
    letter-spacing: 0.05px;
}

#tech-links a {
    color: white;
    font-family: sans-serif;
    text-decoration: none;
}

.perspectiveid {
    -webkit-transform: matrix3d(0);
}

.content {
    color: black;
    width: 40%;
    margin-left: auto;
    margin-right: auto;
}

#termsearch-input {
    height: 56px;
    width: 100%;
    font-size: 16px;
    border: 1px solid #e6e6e6;
    font-family: "PlainMedium", Helvetica, Arial, sans-serif;
    color: #979797;
    padding-left: 26px;
    letter-spacing: 0.05px;
    -webkit-text-size-adjust: 100%;
    -ms-text-size-adjust: 100%;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    display: table;
    padding-top: 0px;
	border-radius: 4px;
}

#termsearch-input:focus {
    outline: none;
}

::-webkit-input-placeholder {
    display: table-cell;
    vertical-align: middle;
}

#searches {
    width: 1532px;
	    margin-top: 2.125em;
    padding-right: 0px;
    padding-left: 0px;
    padding-bottom: 0px;
    margin-bottom: 30px;
    margin-right: auto;
    margin-left: auto;
}

#searches:after {
	content: ' ';
  display: block;
  clear: both;
	}

.search {
    width: 25%;
    height: 80px;
    float: left;
    padding: 0px;
    margin: 0px;
	-webkit-border-bottom-right-radius: 9px;
    border-top-bottom-right-radius: 9px;

}

.search .tileview {
    width: 100%;
    height: 100%;
    background-color: inherit;
    padding-left: 31px;
	padding-right: 16px;
    display: table;
    font-size: 16px;
    letter-spacing: 0.02em;
	  -webkit-border-bottom-right-radius: 9px;
    border-bottom-right-radius: 9px;
	 /*-webkit-transition: background 0.39s ease;*/
    -webkit-transition: background-color 900ms ease-out,width 500ms cubic-bezier(0.25, 0.25, 0.01, 1);
}
.ordering {
	display: inline-block;
	}

.search .tileview:hover {
    background-color: rgba(67,144,217,0.2);
}

.search .fullview {
    display: none;
    background-color: inherit;
    -webkit-border-radius: 16px;
    border-radius: 16px;
}

.search .search-terms {
    display: table-cell;
    font-size: 16px;
    line-height: 1.2;
    vertical-align: middle;
}

.search .search-terms:hover {
    padding-left: 16px;
    -webkit-transition: all 0.3s cubic-bezier(0.175, 0.885, 0.320, 1.475);
}

.fullview {
    padding-left: 8.6%;
    padding-right: 8.6%;
    padding-top: 84px;
}

.fullview .leftfull {
    width: 38.7%;
    float: left;
    height: 100%;
	line-height: 1.4;
}

.leftfull .search-terms {
    font-size: 3.5em;
    line-height: 49px;
    width: 100%;
    height: 100%;
    padding-bottom: 24px;
    padding-top: 16px;
    transition: none;
    -webkit-transition: none;
}

.fullview .search-terms:hover {
    padding: 0;
    padding-bottom: 24px;
    padding-top: 16px;
    -webkit-transition: none;
    transition: none;
}

.results-personal {
    width: 52%;
    float: right;
    font-size: 16px;
    line-height: 28px;
	max-height: 670px;
	overflow-y: auto;
	min-width: 500px;
}

.result{
	display: block;
	float: none;
	width: 100%;
	position: relative;
	margin-bottom: 13px;
	}

.results-personal a {
    color: #fff;
}

.rank {
    width: 42px;
	height: 42px;
	padding-top: 5px;
	margin-right: 18px;
	font-size: 1.2em;
	display: inline-block;
	text-align:center;
	border-radius: 2px;
	border: 1px solid rgba(91,175,254,0.2);
}

.date {
    width: 100%;
    padding: 0;
}

.percentage {
    width: 35.7%;
    padding: 0;
    margin: 0;
    position: absolute;
    font-size: 69px;
    bottom: 11.8%;
}

.collapser {
    position: fixed;
    top: 50px;
    right: 50px;
}

.break-personalised {
    font-size: 16px;
    padding-top: 6px;
    text-transform: uppercase;
}

.break-search {
    padding: 0;
    margin: 0;
    font-size: 16px;
}

.flip {
    transform-style: preserve-3d;
    transition: all 1.0s linear;
    transform: rotateY(180deg);
}

.dateslider {
    width: 100%;
}



.indicator-promoted {
    background-color: green;
}

.indicator-demoted {
    background-color: red;
}

.indicator-stable {
    background-color: white;
}

/*.result div {
    display: inline-block;
	vertical-align:top;
}*/
.anon-rank {
	height: 21px;
	width: 21px;
	position: relative;
	vertical-align:top;
	text-align: center;
	border-radius: 1px;
	background-color: rgba(91,175,254,0.2);
	line-height: 20px;
	font-size: 12px;
	padding: 0;
	
	}
	
	.indicator {
	width: 17px;
	height: 17px;
	margin-top: 4px;
	margin-left: 2px;
	position: relative;
	 -webkit-border-radius: 16px;
}
	
	
	.stupid {
	width: 21px;
	height: 42px;
	display:inline-block;
	text-align:center;
	vertical-align:top;
	margin-right: 16px;
	}

	.results-personal a{
		display:inline-block;
		}


#topbar {
    width: 100%;
    border-top: 0;
    z-index: 5;
    position: -webkit-sticky;
    color: #1f1f1f;
}

.sticky {
    position: fixed;
    width: 100%;
    left: 0;
    top: 0;
    z-index: 100;
    border-top: 0;
}

#topbar .folder a {
    color: white;
}

.folder {
    background-color: #fff;
    padding-top: 52px;
    transition: transform 0.5s;
}

#top-nav {
    background-color: #fff;
    color: #1f1f1f;
    height: 73px;
    width: 100%;
    margin-left: auto;
    margin-right: auto;
	border-bottom: 1px solid transparent;
-webkit-transition: border-color 0.3s;
-moz-transition: border-color 0.3s;
-ms-transition: border-color 0.3s;
-o-transition: border-color 0.3s;
transition: border-color 0.3s;
}
.top-nav-scrolled {
    border-bottom: 1px solid #ddd;

}


.inner-middle {
    width: 91.9%;
	max-width: 1532px;
	margin-right: auto;
	margin-left: auto;
    height: 73px;
	padding-top: 30px;
	font-size: 0.89em;
	 border-bottom: 1px solid #e6e6e6;
	letter-spacing: 0.01em;
	  -webkit-text-size-adjust: 100%;
    -ms-text-size-adjust: 100%;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
	   text-rendering: optimizeLegibility;
    font-feature-settings: "kern";
    font-kerning: normal;
}

.inner-middle-scrolled {
    border: 0;
    }

.inner {
    width: 91.9%;
	max-width: 1532px;
    margin-right: auto;
    margin-left: auto;
}

.accordion {
    width: 100%;
    overflow: hidden;
    position: relative;
}

.accordion__title {
    padding-right: 0.8em;
    float: left;
    cursor: pointer;
    font-size: 2em;
    letter-spacing: -0.01em;
    color: #e6e6e6;
    -webkit-transition: background-color 900ms ease-out,width 500ms cubic-bezier(0.25, 0.25, 0.01, 1);
}

.report__accordion__title {
    padding-right: 0.8em;
    float: left;
    cursor: pointer;
    font-size: 2em;
    letter-spacing: -0.01em;
    color: #1f1f1f;
    
}

.no-js .accordion__title {
    float: none;
    height: auto;
    cursor: auto;
    margin: 0;
    padding: 0 2em;
}

.accordion__content {
    float: right;
	height: 56px;
    width: 100%;
    margin: 3em 0 0 -100%;
    padding-top: 0;
    padding-left: 0;
    padding-bottom: 1.5em;
    -webkit-transition: background 900ms ease;
}

.no-js .accordion__content {
    float: left;
    margin: 0;
}

.accordion__title.active {
    color: #1f1f1f;
}

.accordion__title:hover {
    color: #1f1f1f;
	opacity: 1;
  transition: 1s;
}

.no-js .accordion__title:hover {
    background-color: white;
    color: #e6e6e6;
}

/*.accordion__title.active {
  border-top-color:lime;
  
}*/
@media (max-width: 1638px) {
	#searches {
		width: 1508px;
		}
		
		.search {
		width: 377px;
		}
}


@media (max-width: 1625px) {
	#searches {
		width: 1480px;
		}
		
		.search {
		width: 370px;
		}
}

@media (max-width: 1600px) {
	#searches {
		width: 1456px;
		}
}

@media (max-width: 1561px) {
	#searches {
		width: 1420px;
		}
}

@media (max-width: 1510px) {
	#searches {
		width: 1372px;
		}
}

@media (max-width: 1460px) {
	#searches {
		width: 1328px;
		}
}

@media (max-width: 1444px) {
	#searches {
		width: 1316px;
		}
}


@media (max-width: 1406px) {
	#searches {
		width: 1276px;
		}
}

@media (max-width: 1381px) {
	#searches {
		width: 1256px;
		}
}

@media (max-width: 1353px) {
	#searches {
		width: 1228px;
		}
}

@media (max-width: 1348px) {
	#searches {
		width: 1224px;
		}
}

@media (max-width: 1335px) {
	#searches {
		width: 1216px;
		}
}

@media (max-width: 1289px) {
	#searches {
		width: 1168px;
		}
}

@media (max-width: 1298px) {
	#searches {
		width: 1180px;
		}
}

@media (max-width: 1267px) {
	#searches {
		width: 1152px;
		}
}

@media (max-width: 1222px) {
	#searches {
		width: 1112px;
		}
	
}






@media (max-width: 48em) {
  
    .accordion {
        border: none;
    }

    .accordion__title,
  .accordion__content {
        float: none;
        margin: 0;
    }

    .accordion__title:first-child {
        border: none;
    }

    .accordion__title.active {
        border-top-color: #eee;
    }

    .accordion__title.active, .accordion__title:hover {
        background: none;
    }

    .accordion__title:before {
        content: "+";
        text-align: center;
        width: 2em;
        display: inline-block;
    }

    .accordion__title.active:before {
        content: "-";
    }

    .overflow-scrolling {
        overflow-y: none;
        height: 6em;
        padding: 1em 1em 0 1em;
  /* Warning: momemtum scrolling seems buggy on iOS 7  */
        -webkit-overflow-scrolling: touch;
    }

    .accordion__content {
        position: relative;
        overflow: hidden;
        padding: 0;
		margin-bottom: 1em;
    }

    .no-js .accordion__content {
        padding: 1em;
        overflow: auto;
        display: block;
    }

    .accordion__content:after {
        position: absolute;
        top: 100%;
        left: 0;
        width: 100%;
        height: 50px;
        content: '';
    }
}

.table-row {
    display: table-row;
}
.table-cell{
    display: table-cell;
}
.report-line {
    width: 100%;
    display: table;
    height:15%;
    padding-bottom: 12px;
    padding-top: 12px;
}

.masonry {
max-width: 1532px;
width: 100%;
margin-left: auto;
margin-right: auto;

	}
	
.masonry:after {
  content: '';
  display: block;
  clear: both;
}


.masonry .grid-sizer {
  width:  2%;
}

.masonry .item{
  width:  30%;
  padding: 0px 16px;
    height: 360px;
  float: left;
  color: #1f1f1f;
  border-top: 1px solid #eee;
}



.item.w2 { width:  40%; }

.item.h2 { height: 300px; }
.item.h3 { height: 330px; }
.item.h4 { height: 580px; }


.item.gigante {
  width: 180px;
  height: 180px;
}



svg {
    width:100%
}

.chart-container{
    height:85%;
    width:100%;
}
.chartbox {
    height: 100%;
}

body.label{
    background-color: rgba(0,0,0,0);
    display: table;
}

.innerlabel{
    display: table-cell;
    color:white;
    background-color: rgba(0,0,0,0);
    text-align: center;
    vertical-align: middle;
    padding:5px;
}::-webkit-scrollbar {
    width: 15px;
    height: 15px;
}
::-webkit-scrollbar-corner {
    background-image: url(http://i.stack.imgur.com/FguQn.png?corner.png);
    background-repeat: no-repeat;
}
::-webkit-resizer {
    background-image: url(http://i.stack.imgur.com/aKKDY.png?resizer.png);
    background-repeat: no-repeat;
    background-position: bottom right;
}
::-webkit-scrollbar-button:start {
    display: none;
}
::-webkit-scrollbar-button:end {
    display: block;
}
::-webkit-scrollbar:horizontal {
    -webkit-border-image: url(http://i.stack.imgur.com/NQ2K6.png?horizontal-button.png) 0 2 0 2;
    border-color: transparent;
    border-width: 0 2px;
    background-image: url(http://i.stack.imgur.com/8xDbU.png?horizontal-button-background.png);
    background-repeat: repeat-x;
}
::-webkit-scrollbar:horizontal:corner-present {
    border-right-width: 0;
}
::-webkit-scrollbar-thumb:horizontal {
    -webkit-border-image: url(http://i.stack.imgur.com/YQRD7.png?horizontal-thumb.png) 0 15 0 15;
    border-color: transparent;
    border-width: 0 15px;
    min-width: 20px;
}
::-webkit-scrollbar-track-piece:horizontal:start {
    margin-left: 6px;
}
::-webkit-scrollbar-track-piece:horizontal:end {
    margin-right: -6px;
}
::-webkit-scrollbar-track-piece:horizontal:decrement {
    -webkit-border-image: url(http://i.stack.imgur.com/p9yMk.png?horizontal-track.png) 0 15 0 15;
    border-color: transparent;
    border-width: 0 0 0 15px;
}
::-webkit-scrollbar-track-piece:horizontal:increment {
    -webkit-border-image: url(http://i.stack.imgur.com/p9yMk.png?horizontal-track.png) 0 15 0 15;
    border-color: transparent;
    border-width: 0 15px 0 0;
}
::-webkit-scrollbar-button:horizontal {
    width: 21px;
    -webkit-border-image: url(http://i.stack.imgur.com/NQ2K6.png?horizontal-button.png) 0 2 0 2;
    border-color: transparent;
    border-width: 0 2px;
}
::-webkit-scrollbar-button:horizontal:decrement {
    background-image: url(http://i.stack.imgur.com/dGOKL.png?horizontal-decrement-arrow.png), url(http://i.stack.imgur.com/8xDbU.png?horizontal-button-background.png);
    background-repeat: no-repeat, repeat-x;
    background-position: 7px 4px, 0 0;
}
::-webkit-scrollbar-button:horizontal:decrement:active {
    -webkit-border-image: url(http://i.stack.imgur.com/gT5BM.png?horizontal-button-active.png) 0 2 0 2;
    background-image: url(http://i.stack.imgur.com/dGOKL.png?horizontal-decrement-arrow.png), url(http://i.stack.imgur.com/RDf8L.png?horizontal-button-background-active.png);
}
::-webkit-scrollbar-button:horizontal:increment {
    background-image: url(http://i.stack.imgur.com/5rJr5.png?horizontal-increment-arrow.png), url(http://i.stack.imgur.com/8xDbU.png?horizontal-button-background.png);
    background-repeat: no-repeat, repeat-x;
    width: 16px;
    border-left-width: 0;
    background-position: 3px 4px, 0 0;
}
::-webkit-scrollbar-button:horizontal:increment:active {
    -webkit-border-image: url(http://i.stack.imgur.com/gT5BM.png?horizontal-button-active.png) 0 2 0 2;
    background-image: url(http://i.stack.imgur.com/5rJr5.png?horizontal-increment-arrow.png), url(http://i.stack.imgur.com/RDf8L.png?horizontal-button-background-active.png);
}
::-webkit-scrollbar-button:horizontal:end:increment:corner-present {
    border-right-width: 0;
    width: 15px;
}
::-webkit-scrollbar:vertical {
    -webkit-border-image: url(http://i.stack.imgur.com/NdaTT.png?vertical-button.png) 2 0 2 0;
    border-color: transparent;
    border-width: 2px 0;
    background-image: url(http://i.stack.imgur.com/p7j9a.png?vertical-button-background.png);
    background-repeat: repeat-y;
}
::-webkit-scrollbar:vertical:corner-present {
    border-bottom-width: 0;
}
::-webkit-scrollbar-thumb:vertical {
    -webkit-border-image: url(http://i.stack.imgur.com/rPEsZ.png?vertical-thumb.png) 15 0 15 0;
    border-color: transparent;
    border-width: 15px 0;
    min-height: 20px;
}
::-webkit-scrollbar-track-piece:vertical:start {
    margin-top: 6px;
}
::-webkit-scrollbar-track-piece:vertical:end {
    margin-bottom: -6px;
}
::-webkit-scrollbar-track-piece:vertical:decrement {
    -webkit-border-image: url(http://i.stack.imgur.com/Rb6ru.png?vertical-track.png) 15 0 15 0;
    border-color: transparent;
    border-width: 15px 0 0 0;
}
::-webkit-scrollbar-track-piece:vertical:increment {
    -webkit-border-image: url(http://i.stack.imgur.com/Rb6ru.png?vertical-track.png) 15 0 15 0;
    border-color: transparent;
    border-width: 0 0 15px 0;
}
::-webkit-scrollbar-button:vertical {
    height: 21px;
    -webkit-border-image: url(http://i.stack.imgur.com/NdaTT.png?vertical-button.png) 2 0 2 0;
    border-color: transparent;
    border-width: 2px 0;
}
::-webkit-scrollbar-button:vertical:decrement {
    background-image: url(http://i.stack.imgur.com/KQvwk.png?vertical-decrement-arrow.png), url(http://i.stack.imgur.com/p7j9a.png?vertical-button-background.png);
    background-repeat: no-repeat, repeat-y;
    background-position: 4px 7px, 0 0;
}
::-webkit-scrollbar-button:vertical:decrement:active {
    -webkit-border-image: url(http://i.stack.imgur.com/uW3TL.png?vertical-button-active.png) 2 0 2 0;
    background-image: url(http://i.stack.imgur.com/KQvwk.png?vertical-decrement-arrow.png), url(http://i.stack.imgur.com/puDsH.png?vertical-button-background-active.png);
}
::-webkit-scrollbar-button:vertical:increment {
    background-image: url(http://i.stack.imgur.com/UjkVR.png?vertical-increment-arrow.png), url(http://i.stack.imgur.com/p7j9a.png?vertical-button-background.png);
    background-repeat: no-repeat, repeat-y;
    height: 16px;
    border-top-width: 0;
    background-position: 4px 5px, 0 0;
}
::-webkit-scrollbar-button:vertical:increment:active {
    -webkit-border-image: url(http://i.stack.imgur.com/uW3TL.png?vertical-button-active.png) 2 0 2 0;
    background-image: url(http://i.stack.imgur.com/UjkVR.png?vertical-increment-arrow.png), url(http://i.stack.imgur.com/puDsH.png?vertical-button-background-active.png);
}
::-webkit-scrollbar-button:vertical:end:increment:corner-present {
    border-bottom-width: 0;
    height: 15px;
}
::-webkit-scrollbar:disabled {
    background: red;
    -webkit-border-image: none;
    display: none;
}
```


# Search visualisations
```html
<!DOCTYPE html>
<html>
<head>
  <link rel="stylesheet" href="css/futura-pt.css">
  
	<style>
	*{
		box-sizing: border-box;
	}
	html{
		width:100%;
		height:100%;
	}
	body, html {
		margin: 0px;
		padding: 0px;
		position: fixed;
		width:100%;
		height:100%;
	}
	#chart canvas{
		margin: 0px;
		padding: 0px;
		position:fixed;
		top:0px;
		left:0px;
		z-index:-10;
	}
    
  #infobox{
    background-color: rgba(255,255,255,0.6);
    z-index: 10;
    width: 500px;
    text-align: right;
    border: 1px solid black;
    font-family: "futura-pt",sans-serif;
  }
  .action-button{
    background-color: #4479d4;
    cursor:pointer;
    color: white;
    font-family: sans-serif;
    padding:0.5em;
    margin:0 0.5em 0 0.5em;
    border:none;
    width:150px;
    float:left;
    text-align:center;
    position: relative;
  }
  .action-button.fail{
    background-color: red;
  }
  .action-button.succeed{
    background-color: #269926;
  }

  .action-button:hover{
    background-color: #052C6E;
  }

  .actions{
    margin:1em;
    opacity: 0.8;
    position:absolute;
    top:0px
  }   

	</style>
	<script src="js/processing.min.js"></script>
	<script src="js/jquery/jquery.min.js"></script>
	<script src="js/tether.min.js"></script>
</head>
<body>
 <div class="actions">
    <div id="clear" class="action-button"> Clear Data </div>
  </div>
	<div id="infobox" class="{{category}}" style="display:none;">
      <!--<p class="category">Category: <span id="category-placeholder">{{category}}</span></p>-->
      <p><a class="search" href="{{search_url}}" target="_blank">{{terms}}</a></p>
      <p><a class="result" href="{{url}}" target="_blank">{{result}}</a></p>
      <!--<p class="rank">User Rank: <span id="rank-placeholder">{{personal_rank}}</span></p>-->
    </div>
	<canvas id="canvas" width="600" height="600"></canvas>
	<script src="src/visualisation/common.js"></script>
	<script src="src/visualisation/sketch.js"></script>
</body>
</html>
```

# The Homepage

```html
<!DOCTYPE html>
<html>
<head>
  <link rel="stylesheet" href="css/futura-pt.css">
  
	<style>
	*{
		box-sizing: border-box;
	}
	html{
		width:100%;
		height:100%;
	}
	body, html {
		margin: 0px;
		padding: 0px;
		width:100%;
		height:100%;
	}
	</style>
	<script src="js/jquery/jquery.min.js"></script>
	<script src="src/common.js"></script>
 	<script src="src/history.js"></script>
</head>
<body>
    <button id="pressme">download</button>
    <input type="file" id="historyUpload"></input>
    
    <table id="history-items">
        <tr><th>Visit Count</th><th>title</th></tr>
    </table>
</body>
</html>
<!DOCTYPE html>
<html>
   <head>
      <link rel="stylesheet" href="css/normalize.css">
      <link rel="stylesheet" href="css/common.css">
      <link rel="stylesheet" href="js/jquery-ui-1.11.1/jquery-ui.min.css">
      <link rel="stylesheet" href="js/JQRangeSlider-5.7.0/css/iThing-min.css">
      <link rel="stylesheet" type="text/css" media="screen" href="PlainMedium-Regular.css" />
      <script src="js/jquery/jquery.min.js"></script>
      <script src="js/jquery-ui-1.11.1/jquery-ui.min.js"></script>
      <script src="js/JQRangeSlider-5.7.0/JQDateRangeSlider-withRuler-min.js"></script>
      <script src="js/XMLWriter-1.0.0.js"></script>
      <script src="js/handlebars-v1.3.0.js"></script>
        <script src="js/jquery.nicescroll.js"></script>
      <!--
         <script src="js/jsMatrix/IOUtils.js"></script>
         <script src="js/jsMatrix/LUDecomposition.js"></script>
         <script src="js/jsMatrix/QRDecomposition.js"></script>
         <script src="js/jsMatrix/EVDecomposition.js"></script>
         <script src="js/jsMatrix/Matrix.js"></script>
         <script src="js/masonry.pkgd.min.js"></script>-->
      <script src="js/isotope.pkgd.min.js"></script>
      <script src="js/packery-mode.pkgd.js"></script>
      <!--<script src="js/jquery.isotope.perfectmasonry.js"></script>-->
      <script src="src/common.js"></script>
      <script src="src/carrot.js"></script>
      <script src="src/home-style.js"></script>
      <script src="src/home.js"></script>

      <script id="search-template" type="text/x-handlebars-template">
         <div class="search" data-uid="{{uid}}">
         	<div class="fullview">
         	<button class="collapser">Collapse</button>
         	<div class="leftfull">
         	<span class="break-search">you searched for</span><br>
         		<div class="search-terms">{{terms}}</div>
         		<div class="date">at {{date}}.</div>		
         	</div>	
         	
         	<div class="percentage">{{percentage}}%<p class="break-personalised">personalised</p>
         	</div>
         
         
         	
         		<div class="results-personal">
         		{{#each personalScores}}
         			<div class="result {{category}}">
         				<div class="rank">{{personal_rank}}</div>
						<div class="stupid">
         				<div class="anon-rank">{{anonymous_rank}}</div>
         				<div class="indicator {{indicatorclass}}"></div>
						</div>
         				<a class"url" href="{{url}}">{{result}}</a>
         				<!--<div class="score">{{score}}</div>-->
         			</div>
         		{{/each}}
         		</div>
         		<!--
            {{#each anonymous}}
            	{{url}}
            	{{title}}
            	{{snippet}}
            {{/each}}
            -->
         
         	</div>
         	<div class="tileview">
         		<div class="search-terms">{{terms}}</div>
         	</div>
         </div>
      </script>
      
  
   </head>
   <body>
      <div id="topbar">
         <div id="top-nav">
            <div class="inner-middle">Persanalysed | <a href="report.html">Report</a> | <a href="options.html">Options</a></div>
         </div>
         <div class="folder">
            <div class="filtering">
               <div class="inner">
                  <dl class="accordion">
                     <dt class="accordion__title">Search</dt>
                     <dd class="accordion__content">
                        <div class="termsearch"><input id="termsearch-input" placeholder="Enter a term from your search history..." /></div>
                     </dd>
                     <dt class="accordion__title">Filter</dt>
                     <dd class="accordion__content">
                        <div class="dateslider">
                           <div id="dateslider"></div>
                        </div>
                     </dd>
                     <dt class="accordion__title">Sort</dt>
                     <dd class="accordion__content">
                        <span>Sort by:</span>
                        <div class="ordering">
                           <button id="sortby-most-personal">Personalisation</button>
                           <button id="sortby-time-ascending">Earliest</button>
                           <button id="sortby-time-descending">Latest</button>
                           <button id="sortby-alpha">Terms</button>
                        </div>
                     </dd>
                  </dl>
                  <div>
                  </div>
               </div>
            </div>
         </div>
      </div>
      <div id="searches">
      </div>
      <!--div style="clear:both;"></div-->
   </body>
</html>
```

# Specifying permissions to the browser
```javascript
{
  "name": "Bubbleviz: Filter Bubble Visualiser",
  "version": "0.0.1",
  "manifest_version": 2,
  "description": "Visualises the difference between searching while logged in and anonymous",
  "homepage_url": "http://extensionizr.com",
  "icons": {
    "16": "icons/icon16.png",
    "48": "icons/icon48.png",
    "128": "icons/icon128.png"
  },
  "browser_action": { 
    "default_icon": { 
      "19": "icons/icon19.png"
    }
  },
  "permissions": [ 
    "http://bubbleviz.herokuapp.com/*",
    "http://bubbleviz-carrot.herokuapp.com/*",
    "storage",
    "history",
    "downloads"
  ],
  "default_locale": "en",
  "background": {
    "page": "src/bg/background.html",
    "persistent": true
  },
  "content_security_policy": "script-src 'self' 'unsafe-eval'; object-src 'self'",
  "content_scripts": [
    {
      "matches": [
          "https://*.google.com/*", 
          "http://*.google.com/*",
        "https://*.google.co.uk/*",
        "http://*.google.co.uk/*",
        "https://*.google.com.au/*",
        "http://*.google.com.au/*"
      ],
      "css": [ "src/inject/inject.css"],
      "js": ["js/signals.min.js", "js/hasher.min.js", "src/common.js", "src/inject/inject.js" ]
    }
  ]
}
```

## Accessing options

```html
<!DOCTYPE html>
<html>
<head>
	<link rel="stylesheet" href="js/jquery-ui-slider-pips/jquery-ui-slider-pips.css">
	<link rel="stylesheet" href="js/jquery-ui-1.11.1/jquery-ui.min.css">
	<link rel="stylesheet" href="js/liquidslider-master/css/liquid-slider.css">
	<link rel="stylesheet" href="css/animate.min.css">
	<link rel="stylesheet" href="css/normalize.css">
	<link rel="stylesheet" href="css/futura-pt.css">
	<link rel="stylesheet" href="css/common.css">

	<style>
	*{
		box-sizing: border-box;
	}
	html{
		width:100%;
		height:100%;
	}
	body, html {
		margin: 0px;
		padding: 0px;
		width:100%;
		height:100%;
	}
	</style>
	<script src="js/jquery/jquery.min.js"></script>
	<script src="js/XMLWriter-1.0.0.js"></script>
 	<script src="src/common.js"></script>
 	<script src="src/carrot.js"></script>
 	<script src="src/options.js"></script>
</head>
<body>
	<div id="tech-links">
		<a href="history.html">Browser History</a> |
		<a href="dynamic.html">Dynamic</a> |
		<a href="visualisation.html">Visualisation</a> |
		<a id="profile-download" href="#">download profile</a> |
		<a id="clear-profile" href="#">Clear Profile</a> |
		<input type="file" id="profile-upload">
	</div>
</body>
</html>
```

# The Report

```html
<!DOCTYPE html>
<html>
   <head>
      <link rel="stylesheet" href="js/jquery-ui-1.11.1/jquery-ui.min.css">
      <link rel="stylesheet" href="css/animate.min.css">
      <link rel="stylesheet" href="css/normalize.css">
      <link rel="stylesheet" href="css/common.css">
      <link rel="stylesheet" href="js/JQRangeSlider-5.7.0/css/iThing-min.css">
      <link rel="stylesheet" type="text/css" media="screen" href="PlainMedium-Regular.css" />
      
      <!-- external script -->
      <script src="js/jquery/jquery.min.js"></script>
      <script src="js/jquery-ui-1.11.1/jquery-ui.min.js"></script>
      <script src="js/JQRangeSlider-5.7.0/JQDateRangeSlider-withRuler-min.js"></script>
      <script src="js/XMLWriter-1.0.0.js"></script>
      <script src="js/handlebars-v1.3.0.js"></script>
       <script src="js/jquery.nicescroll.js"></script>
      <script src="js/spin.min.js"></script>
      <script src="js/d3.v3.js"></script>
       <script src="js/d3-tip.js"></script>
      <script src="js/d4.js"></script>
     
      <script src="js/jquery.easing.min.js"></script>
      <script src="js/jquery.touchSwipe.min.js"></script>
      <script src="js/masonry.pkgd.min.js"></script>
      <script src="js/lodash.min.js"></script>

      <!-- our scripts -->
      <script src="src/common.js"></script>
      <script src="src/carrot.js"></script>
      <script src="src/report.js"></script>
      
     <style>

/* tooltip */
.axis path,
.axis line {
  stroke: #000;
  shape-rendering: crispEdges;
}

.bar {
  fill: #d3d5d5;
  border-bottom-right-radius: 9px;
}

rect {
  fill: #d3d5d5;
  border-bottom-right-radius: 9px;
}

.bar:hover {
  fill: #dddddd;
}

.x.axis path {
}

.y.axis path {
	
}



.chart rect {
  fill: #dddddd;
  width: 100%;
}

#top-links .chart text.column-label{
    display: visible;
}

#bar-chart-1 .chart text.column-label, #bar-chart-2 .chart text.column-label{
  display: none;
}

.axis line {
  stroke: #fff;
  stroke-opacity: .5;
  shape-rendering: crispEdges;
}


.d3-tip {
  line-height: 1;
  font-weight: bold;
  padding: 12px;
  background: rgba(0, 0, 0, 0.8);
  color: #fff;
  border-radius: 2px;
}

/* Creates a small triangle extender for the tooltip */
.d3-tip:after {
  box-sizing: border-box;
  display: inline;
  font-size: 10px;
  width: 100%;
  line-height: 1;
  color: rgba(0, 0, 0, 0.8);
  content: "\25BC";
  position: absolute;
  text-align: center;
}

/* Style northward tooltips differently */
.d3-tip.n:after {
  margin: -1px 0 0 0;
  top: 100%;
  left: 0;
}

.accordion__content {
  border: 0;
  }
  
  .accordion__content {
  margin: 2em 0 0 -100%;
  }
  
  svg.d4 {
  font-family: Monaco, Menlo, Consolas, "Courier New", monospace;
  font-size:11px;
}
.d4 .tick text {
    font-size: 9px;
    fill: #999;
    shape-rendering: crispEdges;
}

.d4 .axis .domain, .d4 .axis .tick line {
  fill: none;
  stroke: #999;
  stroke-width: 1px;
  shape-rendering: crispEdges;
}

.d4 .line, .d4 path, .d4 .connectors line {
    fill: none;
    stroke: #222;
    stroke-width: 1px;
}
</style>
   </head>
   <body>
 <div id="topbar">
         <div id="top-nav">
            <div class="inner-middle"><a href="home.html">Persanalysed</a> | <a href="report.html">Report</a> | <a href="options.html">Options</a></div>
         </div>
         <div class="folder">
            <div class="filtering">
               <div class="inner">
                  <dl class="accordion">
                     
                     <dt class="report__accordion__title">Dashboard</dt>
                     <dd class="accordion__content">
                        <div class="dateslider">
                           <div id="dateslider"></div>
                        </div>
                     </dd>
                     
                  </dl>
                  <div>
                  </div>
               </div>
            </div>
         </div>
      </div>


      
<div class="masonry">
  <div class="grid-sizer"></div>
  <div class="item">
    <div class="report-line">
      <p class="report-headings"> Hourly Breakdown </p>
    </div>
    <div class="chart-container"> 
      <div class="spinning"></div>
      <div id="bar-chart-1" class="chartbox">
        <!-- <svg> -->
      </div>
    </div>
  </div>
  
  
  <div class="item">
    <div class="report-line">
      <p class="report-headings"> Daily Breakdown </p>
    </div>
    <div class="chart-container"> 
      <div class="spinning"></div>
      <div id="bar-chart-2" class="chartbox">
        
      </div>
    </div>
  </div>
  
  
  <div class="item w2 h4">
 <div class="report-line">
      <p class="report-headings"> Top Categories</p>
    </div>
   <div class="chart-container"> 
      <div class="spinning"></div>
      <div id="bubble-chart" class="chartbox"></div>
    </div>
 
  </div>
  
  <div class="item w3">
    <div class="report-line">
      <p class="report-headings"> Stats </p>
    </div>
     <div id="pie-1"></div>
  </div>
  
  <div class="item w4 h2">
    <div class="report-line">
      <p class="report-headings"> Top Links </p>
    </div>
    <div class="spinning"></div>
    <div id="top-links" class="top-links"></div>
  </div>
 
  </div>

   
   </body>
</html>
```

# Doing things in the background

## The page
```html
<!DOCTYPE html>
<html>
<head>
  <script type="text/javascript" src="background.js"></script>
  <script type="text/javascript" src="../../js/jquery/jquery.js"></script>
  <script type="text/javascript" src="../../src/common.js"></script>
</head>
</html>
```

```javascript
/**
 * background.js
 */

chrome.browserAction.onClicked.addListener(function(tab) { 
  chrome.tabs.create({url:chrome.extension.getURL("home.html")}); 
});


chrome.runtime.onMessage.addListener(function(request, sender, sendResponse){
  
  console.log("New request for ", request);
  
  var onSuccess = function(data){
    console.log("Received data from server successfully");

    // 1. turn data into element
    var content = data.content;
    console.log("REPLY:", data);
    var parser = new DOMParser();
    var doc = parser.parseFromString(content, "text/html");
    
    // 2. grab results from data
    var results = parseDocumentForResults(doc);
    
    // 3. reply with our results.
    sendResponse(results);
  };

  var onError = function(jqXHR, textStatus, errorThrown ){
    console.log("ERROR making ajax request: "+errorThrown);
  };
  
  
  if(request.url){
    // TODO: Check if search engine URL...
    $.ajax({
      dataType: "json",
      type: "POST",
      url: "http://bubbleviz.herokuapp.com/api/anon-search",
      data: {url: request.url}, 
      success: onSuccess,
      error: onError,
      timeout: 5000   
    });

  } else {
    sendResponse({error: "NO URL"});
  }
  
  /*
   * We must return true to let the chrome extension framework know that 
   * we will be replying asynchronously. If we fail to do so, the framework
   * will invalidate the sendResponse callback and the content script will 
   * never receive our reply.
   */
  return true;
});
if (!String.prototype.encodeHTML) {
  String.prototype.encodeHTML = function () {
    return this.replace(/&/g, '&amp;')
               .replace(/</g, '&lt;')
               .replace(/>/g, '&gt;');
  };
}

function results2xml(results){
	var xw = new XMLWriter('UTF-8');
	xw.formatting = 'indented';//add indentation and newlines
	xw.indentChar = ' ';//indent with spaces
	xw.indentation = 2;//add 2 spaces per level

	xw.writeStartDocument();
	xw.writeStartElement('searchresult');

	xw.writeElementString('query', "Not applicable");

	results.forEach(function(result){
		xw.writeStartElement('document');
			xw.writeAttributeString("id", result.id);
			xw.writeElementString('title', result.result.encodeHTML());
			xw.writeElementString('snippet', '');//result.snippet.encodeHTML());
			xw.writeElementString('url', '');//result.url.encodeHTML());
		xw.writeEndElement();
	});
	xw.writeEndElement();
	xw.writeEndDocument();
	return xw.flush();
}



function carrot_fetch_clusters(results, onSuccess, onError){
	console.log("fetching clusters for "+results.length+" results");
	// Carrot2 struggles to cluster many results
    // in reasoanble time and is timed out by Heroku itself
    // It's also really bad UX to wait that long, so we
    // randomly sample the results set for cluster info
    // it's not perfect, but it's a start
	results = _(results).shuffle().take(2000).value();
	console.log("Limited to "+results.length+" results.");

	var xml = results2xml(results);
	if(!results || results.length < 1){
		if(onSuccess && typeof onsuccess == "function"){
			onSuccess();
		}
		return;
	}

	//console.log(xml);
	$.ajax({
		type: "POST",
		url: "http://bubbleviz-carrot.herokuapp.com/dcs/rest",
		data: {
			"dcs.c2stream": xml,
			"dcs.algorithm": "lingo",
			"dcs.output.format": "JSON",
			"dcs.clusters.only": true,
		},
		success: onSuccess,
		error: onError,
		dataType: 'json',
	});
}
```

# Common functionality

```javascript
/*
 * js/common.js 
 */
 function url2host(url){
  var parser = document.createElement('a');
  parser.href = url;
  return parser.hostname;
 }



function getParameterByName(query_string, name) {
    
  name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
  var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
    results = regex.exec(query_string);
  return results == null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
}

var anonymous_url_to_canonical_url = function(anonymous_url){
  var query_string = anonymous_url.slice(4,anonymous_url.length);
  return getParameterByName(query_string, 'q');
};

var results_to_scores = function(results){
  var scores = [
    /*
    {result: "", category: "both"|"anonymous"|"personal", score: 0.654},
    */
  ];
  
  var personal_results_index = {};
  
  results.personal.forEach(function(result, i){
    result.personal_rank = i+1;
    personal_results_index[result.url] = result;
  });
  
  results.anonymous.forEach(function(result, i){
    var anonymous_rank = i+1;
      var name = result.result;
      var canonical_url = anonymous_url_to_canonical_url(result.url);
    
      if (canonical_url in personal_results_index){
        scores.push({
          url: canonical_url,
          search_url: results.url,
          terms: results.terms,
          result: personal_results_index[canonical_url].result,
          category: "both",
          personal_rank: personal_results_index[canonical_url].personal_rank,
          anonymous_rank: anonymous_rank,
          score: anonymous_rank - personal_results_index[canonical_url].personal_rank 
        });
        
        delete personal_results_index[canonical_url];
        
      }else{
        scores.push({
          terms: results.terms,
          search_url: results.url,
          result:name,
          url: canonical_url,
          anonymous_rank: anonymous_rank,
          category: "anonymous"
        }); 
      }
  });
  
  for(var url in personal_results_index){
    scores.push({
      terms: results.terms,
      search_url: results.url,
      url: url,
      result: personal_results_index[url].result,
      personal_rank: personal_results_index[url].personal_rank,
      category: "personal"
    }); 
  }
  
  return scores;
};


var result_comparator = function(a,b){
  // Category filtering
  if(a.category == "personal" && b.category == "anonymous"){ return -1; }
  if(a.category == "personal" && b.category == "both"){ return -1; }
  if(a.category == "both" && b.category == "personal"){ return 1; }
  if(a.category == "both" && b.category == "anonymous"){ return -1; }
  if(a.category == "anonymous" && b.category == "personal"){ return 1; }
  if(a.category == "anonymous" && b.category == "both"){ return 1; }

  // Simple case of one category only
  if(a.category == "personal" && b.category == "personal"){ return a.personal_rank - b.personal_rank; }
  if(a.category == "anonymous" && b.category == "anonymous"){ return a.anonymous_rank - b.anonymous_rank; }

  // We prefer the personal rank for sorting, since we want more personal items to be closer to the center.
  if(a.category == "both" && b.category == "both"){ return a.personal_rank - b.personal_rank; }
  
  return 0;
    
};

/*
 * Score between 0 and 1 inclusive
 */
var score2color = function(score){
  /*
  Lightest blue #4390d9
  #3c7ad5
  #3764d0
  #324eb3
  #303fa0
  Darkest blue #2f318e
  */
  colors = ["#4390d9", "#3c7ad5", "#3764d0", "#324eb3", "#303fa0", "#2f318e"];
  if(score == 0.0){ return colors[0];}
  return colors[Math.floor((score * colors.length)-0.001)]
}



/**
 * Convert a NodeList to an array
 */
function toArray(obj) {
  var array = [];
  // iterate backwards ensuring that length is an UInt32
  for (var i = obj.length >>> 0; i--;) { 
    array[i] = obj[i];
  }
  return array;
}

function identity(i){
  return i;
}

function grabRawText(elem){
    var buf = "";
    for(var i = 0; i < elem.childNodes.length; i++){
      var node = elem.childNodes[i];
      if(node.nodeValue){
        buf += " " + node.nodeValue;
      }else{
        buf += " " +  grabRawText(node);
      }
    }
    return buf;
}

function parseDocumentForResults(element){
    var elems = element.querySelectorAll(".g");
        
    var results = [];
        
    toArray(elems).forEach(function(elem){
    var innerElem = elem.querySelector('.r');
    var snippetElem = elem.querySelector('.st');
      if(innerElem){
        var link = innerElem.querySelector('a');
        if(link){
          results.push({
            result: link.text,
            snippet: (snippetElem)?grabRawText(snippetElem):"",
            url: link.getAttribute('href')
          });
        }
      }
    });
    return results;
}

function scrapeSearchTerms(element){
  var elem = element.querySelector('#gbqfq');
  return elem.value;
}

function downloadAsJSON(obj, filename){
    var jsonHeader = "data:application/json;charset=utf-8,";
    var fileString = jsonHeader + JSON.stringify(obj, null, '\t') + '\n';
	var encodedURI = encodeURI(fileString);
	chrome.downloads.download({ 'url':encodedURI, filename:filename}, function(){});
}

function searches2results(searches){
    var results = [];
    var counter = 0;
    searches.forEach(function(search){
        var search_unique = {
            terms: search.terms,
            timestamp: search.timestamp,
            url: search.url,
        };
        search.personal.forEach(function(result){
          result.search = search_unique;
          result.id = ""+counter; 
          counter += 1;
          results.push(result);
        });
        search.anonymous.forEach(function(result){
          result.search = search_unique;
          result.id = ""+counter; 
          counter+=1;
          results.push(result);
        });
    });
    return results;
}

function get_searches(onSuccess){
  chrome.storage.local.get("searches", function(store){
    
    // We add the search score here to support legacy searches that didn't
    // get the score calculated when they were stored.
    store.searches.forEach(function(search){
      search.score = search_to_personalisation_score(search);
    });
    //console.log(store.searches);

    if(onSuccess && typeof onSuccess == "function"){
      onSuccess(store.searches);
    }
  });
}

/**
  Building the raw dataset

  !1) fetch searches from chrome storage 
  !2) flatten searches into results
  !3) cluster results using carrot2 server
  !4) add category information to results

  The `onDone()` function will be called with a list 
  of results in the following format:

    {
      "search": {
        "terms": "freefonts",
        "timestamp": 1409347561516,
        "url": "https://www.google.co.uk/search?q=freefonts&oq=freefonts&aqs=chrome..69i57j0l5.1478j0j7&sourceid=chrome&es_sm=93&ie=UTF-8"
      },
      "type": "anon",
      "category":"fonts",
      "categoryScore": 45.3434,
      "result": "1001 Free Fonts - Download Free Fonts",
      "snippet": " 1001   Free Fonts  offers a huge selection of   free fonts . Download   free fonts  for   \nWindows and Macintosh. License fonts for commercial use.",
      "url": "/url?q=http://www.1001freefonts.com/&sa=U&ei=5e8AVI-wF8WI7AbFx4D4Aw&ved=0CBQQFjAA&usg=AFQjCNH1j3w3qieMIxAqtJNRhv5w1e3xeA"
    }

 */
function build_results_dataset(onDone, onFail, filter){
  //console.log("Loading raw dataset");
  chrome.storage.local.get("searches", function(store){
    //console.log("-> Loaded searches");

    var results = [];
    if(filter && typeof filter === "function"){
      console.log("filtering before clusting...");
      results = searches2results(store.searches.filter(filter));
    } else {
      console.log("getting everything...");
      results = searches2results(store.searches);
    }

    //console.log("-> Converted searches to results");

    function _onSuccess(data, textStatus, jqXHR){
      //console.log("-> Loaded category clusters", data);

      // We grab the document ids from carrot to be able to match 
      // document to cluster, then we tag every document
      data.clusters.forEach(function(cluster){
        cluster.documents.forEach(function(docID){
          results.forEach(function(result){
            if(docID == result.id){
              result.category = cluster.phrases[0];
              result.categoryScore = cluster.score;
              return;
            }
          });
        });
      });

      if (onDone && (typeof onDone) == "function"){
        onDone(results);
      }
    }

    function _onError(jqXHR, textStatus, errorThrown){
      //alert("Error occured on request: "+ textStatus + ", "+ errorThrown);
      if (onFail && (typeof onFail) == "function"){
        onFail("Error occured while fetching cluster information");
      }
      return;
    }

    carrot_fetch_clusters(
      results,
      _onSuccess, 
      _onError
    );
    
  });
}


function searches_to_categorised_results(searches, onSuccess, onFailure){
    var results = searches2results(searches); 
    console.log("searches -> categories")
    
    function _onSuccess(data, textStatus, jqXHR){
      console.log("carrot_fetch success!");
      // We grab the document ids from carrot to be able to match 
      // document to cluster, then we tag every document
      data.clusters.forEach(function(cluster){
        cluster.documents.forEach(function(docID){
          results.forEach(function(result){
            if(docID == result.id){
              result.category = cluster.phrases[0];
              result.categoryScore = cluster.score;
              return;
            }
          });
        });
      });

      if (onSuccess && (typeof onSuccess) == "function"){
        onSuccess(results.filter(function(res){return res.category}));
      }
    }
    function _onError(jqXHR, textStatus, errorThrown){
      console.log("carrot_fetch FAILURE!");
      //alert("Error occured on request: "+ textStatus + ", "+ errorThrown);
      if (onFailure && (typeof onFailure) == "function"){
        onFailure("Error occured while fetching cluster information");
      }
      return;
    }
    carrot_fetch_clusters(
      results,
      _onSuccess, 
      _onError
    );
}

function build_history_dataset(onDone, onFail){
  if(onDone && (typeof onDone) == "function"){
    chrome.history.search({
      'text':'', 
      'maxResults':10000, 
      'startTime': (new Date(2012,01,01)).getTime(),
      'endTime': (new Date()).getTime()
    }, onDone);
  } 
}

function search_to_personalisation_score(search){
  var scores = results_to_scores(search); 
  // [
  //   {anonymous_rank: x, personal_rank:y, score:x-y},
  //   {anonymous_rank: x},
  //   {personal_rank:y},
  // ]
  var personal_results = scores.filter(function(result){
    return result.category === "both" || result.category === "personal";
  });

  var max_total = 0;
  personal_results.forEach(function(e,i){
    max_total+= (i+1);
  });
  var max_normalised = max_total;

  var total = personal_results.map(function(result){
    if(result.score){ 
      return Math.abs(result.score); 
    }else if (result.personal_rank){
      return Math.abs(personal_results.length - result.personal_rank);
    }else{
      console.err(result, "Result had neither score nor personal_rank");
      return 0;
    }
  }).reduce(function(a,b){
    return a+b
  });
  return total/max_total;
}


/**
 * Creates a date filter to use in filtering the tiles on the homepage
 */
var make_filter_date = function(startDate, endDate){
  var filter = function(){
    var data = $(this).data("search");
    if (startDate.getTime() < data.timestamp && data.timestamp < endDate.getTime()){
      return true;
    }else{
      return false;
    }
  };
  return filter;
};

/**
 * Creates a string filter on the search terms to use in filtering the tiles on the homepage
 */
var make_filter_terms = function(str){
  var filter = function(){
    var data = $(this).data("search");
    if(data.terms.toUpperCase().indexOf(str.toUpperCase()) > -1){
      return true;
    }else{
      return false;
    }
  };
  return filter;
};

/**
 * Combine filters sensibly
 */
var combine_filters = function (filters) {
  var filter = function(){
    var that = this;
    return filters.map(function(filter){
      if(filter){
        return filter.call(that);
      }else{
        return true;
      }
    }).every(identity);
  };
  return filter;
};


/**
 * Filter search results by date.
 */
function results_by_date(startDate, endDate){
  var filter = function(item){
    if(item.search.timestamp > startDate.getTime() && item.search.timestamp < endDate.getTime()){
     return true;
    }else{
      return false;
    }
  };
  return filter;
}

/*
 * 
 */
function weigh_by_date(item){
  return $(item).data('search').timestamp;
}

/*
 * string comparison function
 */
function strcmp( a, b ) {
    if((a+'').toLowerCase() > (b+'').toLowerCase()) return 1  
    if((a+'').toLowerCase() < (b+'').toLowerCase()) return -1
    return 0
}


/**
 * Filtering and ordering...
 */
var current_date_filter = null;
var current_term_filter = null;

var order_and_filter = function(){
  $("#searches").isotope({
    layoutMode: 'packery',
  transitionDuration:'0.8s',
    filter: combine_filters([current_term_filter, current_date_filter]),
    getSortData:{
      timestamp: weigh_by_date,
      terms: function(elem){ return $(elem).find('.tileview').find('.search-terms').text().toUpperCase(); },
      personalisation: function(elem){return search_to_personalisation_score($(elem).data('search'));}
    },
    sortAscending: {
      terms: true,
      timestamp: false,
      personalisation:false
    },
    sortBy:"personalisation"
  });
};

var reset_slider_bounds = function(min, max){
  $("#dateslider").dateRangeSlider({
    bounds:{
      min: min,
      max: max
    }
  });
};
/*
HistoryItem Doc: https://developer.chrome.com/extensions/history#type-HistoryItem

<table>
  <tr>
    <td>John</td>
    <td>Doe</td>
  </tr>
  <tr>
    <td>Jane</td>
    <td>Doe</td>
  </tr>
</table>
*/



var data; 
  
chrome.history.search({
    'text':'', 
    'maxResults':5000, 
    'startTime': (new Date(2012,01,01)).getTime(),
    'endTime': (new Date()).getTime()
}, function(items){
   data = items;
   
   items.forEach(function(item){
       
       //console.log(item);
       
       var row = $("<tr>");
       var countCell = $("<td>").html(item.visitCount);
       
       if(item.title){
         var titleCell = $("<td>").html(item.title);
       }else{
           titleCell = $("<td>").html(item.url);
       }
       row.append(countCell).append(titleCell);
       $("#history-items").append(row);
   });
});





var handleFiles = function(){
    console.log("file set changed");
   var filelist = this.files;
   var file = filelist[0];
   var reader = new FileReader();
   
   var fileLoadedHandler = function(event){
       console.log("file loaded");
       console.log(event);
       var fileData = event.target.result;
       var jsonData = JSON.parse(fileData);
       console.log(jsonData); 
   }
   
   reader.onload = fileLoadedHandler;
   reader.readAsBinaryString(file);
    
};

$(function(){
    $("#pressme").click(function(){
      downloadAsJSON(data, "view-history.json");
    });
    
    document.getElementById("historyUpload").addEventListener("change", handleFiles, false);
});
var containingSelector = "#searches";
var boxSelector = ".search";
var tobparSelector = "#topbar";
var original_width, original_height, aspect_ration;

/*
REAL.PerspectiveTransform();
*/



var element_to_transform_config = function (elem){
  $elem = $(elem);
  var top = $elem.position().top - $(document).scrollTop();
  var left = $elem.position().left - $(document).scrollLeft();
  var _width = $elem.outerWidth();
  var _height = $elem.outerHeight();
  var new_width = $(window).width();
  var new_height = $(window).height();

  return {
    element: elem,
    src: [
      {x:0, y:0}, 
      {x:_width, y:0}, 
      {x:_width, y:_height}, 
      {x:0, y:_height}
    ],
    dst: [
      {x:-left, y:-top}, 
      {x:new_width, y:-top}, 
      {x:new_width, y:new_height}, 
      {x:-left, y:new_height}]
  }
};

//PerspectiveTransform(element_to_transform_config(element))

var PerspectiveTransform = function(config) {

  var element = config.element; // DOM element to be transformed
  var src   = config.src;   // Source points of the element
  var dst   = config.dst;   // Destiny points of the element
  
  var a = [[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]];
  var b = [0,0,0,0,0,0,0,0];

  for( var i = 0; i < 4; i++ ){
    a[i] = [];
        a[i][0] = a[i+4][3] = src[i].x;
        a[i][1] = a[i+4][4] = src[i].y;
        a[i][2] = a[i+4][5] = 1;
        a[i][3] = a[i][4] = a[i][5] =
        a[i+4][0] = a[i+4][1] = a[i+4][2] = 0;
        a[i][6] = -src[i].x*dst[i].x;
        a[i][7] = -src[i].y*dst[i].x;
        a[i+4][6] = -src[i].x*dst[i].y;
        a[i+4][7] = -src[i].y*dst[i].y;
        
        b[i] = dst[i].x;
        b[i+4] = dst[i].y;
    }
    
  var bM = [];
  for(i=0; i<b.length; i++){
    bM[i] = [b[i]];
  }
  
  // Matrix Libraries from a Java port of JAMA: A Java Matrix Package, http://math.nist.gov/javanumerics/jama/
  // Developed by Dr Peter Coxhead: http://www.cs.bham.ac.uk/~pxc/
  // Available here: http://www.cs.bham.ac.uk/~pxc/js/
  var A = Matrix.create(a);
  var B = Matrix.create(bM);
  var X = Matrix.solve(A,B);

  $fullview = $(element).find('.fullview');
  
  $fullview.show().css({
    'transition-duration': '1s',
    //'position': 'fixed',
    'transform-origin': 'top left',
    //'top': '0px',
    //'left':'0px',
    'background-color':'#ffccff',
    'z-index': '100000'
  });

  $fullview.css('transform', "matrix3d(" + X.mat[0][0] + "," + X.mat[3][0] + ", 0," + X.mat[6][0] + "," + X.mat[1][0] + "," + X.mat[4][0] + ", 0," + X.mat[7][0] + ",0, 0, 1, 0," + X.mat[2][0] + "," + X.mat[5][0] + ", 0, 1)");
  

};

var scores_to_data_template = function(scores){
  // we need: per result - anonrank indicatorclass[indicator-{promoted,demoted,stable}]
  scores.forEach(function(score){

    if(score.anonymous_rank && score.personal_rank){
      if(score.anonymous_rank < score.personal_rank){
        score.indicatorclass = "indicator-demoted";
      }else if (score.anonymous_rank > score.personal_rank){
        score.indicatorclass = "indicator-promoted";
      }else{
        score.indicatorclass = "indicator-stable";
      }
    }

    if(!score.personal_rank){
      score.anonymous_rank = "+";
      score.indicatorclass = "indicator-promoted";
    }

    if(!score.anonymous_rank){
      score.anonymous_rank = "+";
      score.indicatorclass = "indicator-promoted";
    }

  });

  return scores;
};






var resizeBoxes = function (){
	var containerWidth=$(containingSelector).width();
	var width_ratio = containerWidth/original_width;
	var num_boxes = Math.floor(width_ratio);
	var remainingWidth = containerWidth - (num_boxes * original_width);
	var width_increment = remainingWidth/num_boxes;
	var new_width = original_width+width_increment;
	var new_height = new_width/aspect_ration;
	//console.log(containerWidth,width_ratio,num_boxes,remainingWidth,width_increment,new_width,new_height);
	$(boxSelector).width(new_width);
	$(boxSelector).height(new_height);
};

var store_sizes = function(){
  original_width = $(boxSelector).outerWidth();
  original_height = $(boxSelector).outerHeight();
  aspect_ration = original_width / original_height;
  //console.log(original_width,original_height,aspect_ration);
}

var expended = false;

var collapse_tile = function(elem){
  if(!expended){return;}

  console.log('Collapsing tile...');
  $fullview = $(elem);
  $search = $fullview.parent();
  $tileview = $search.find('.tileview');
  $('#searches').isotope('bindResize');
  $('#searches').isotope('layout');
  //order_and_filter();

  $('body').css('overflow-y', 'auto');
  resizeBoxes();
  var new_settings = {
    position: 'fixed',
    top: ($search.position().top - $(document).scrollTop()) +'px',
    left: ($search.position().left - $(document).scrollLeft()) +'px',
    width: $search.width()+'px',
    height: $search.height()+'px',
    'z-index': 10,
  };  

  $fullview.animate(new_settings,1000, function(){
    $(this).css({
      top: 'auto',
      left: 'auto',
      bottom: 'auto',
      width:'100%',
      height:'100%',
      position: 'relative',
      'z-index':1
    });
    $fullview.hide();
    //$fullview;
    //$elem.find('.tileview').fadeIn();
    
    //$elem.click(function(){
    //  expand_tile($tileview);
    //});
    $('#dateslider').dateRangeSlider('resize');
    expended = false;
  });
};

// expand_tile will receive a tileview element
var expand_tile = function(elem){
  if(expended){return;}
  expended = true;
  console.log("Expanding tile...");
  $tileview = $(elem);
  $search = $tileview.parent();
  $fullview = $search.find('.fullview');
  $('#searches').isotope('unbindResize');
  
  $fullview.find(".collapser").click(function(){
    collapse_tile($fullview);
  });
  
  // viewport positions
  var initial_settings = {
    position: 'fixed',
    top: ($search.position().top - $(document).scrollTop()) +'px',
    left: ($search.position().left - $(document).scrollLeft()) +'px',
    width: $search.outerWidth()+'px',
    height: $search.outerHeight()+'px',
    'z-index': 10
  };

  $fullview.show().css(initial_settings);
  
  $fullview.find('.results-personal').isotope({
    itemSelector: '.result',
	layoutMode: 'packery',
	packery: {
  gutter: 0
},
    getSortData: {
      rank: function(elem){
        return parseInt($(elem).find('.rank').text());
      }
    },
    filter : function(){
      if($(this).hasClass('anonymous')){
        return false;
      }
      return true;
    },
    sortBy: 'rank'
    
  }); 

  $fullview.animate({
    width:'98%', 
    height:'96%',
    top:'2%',
    left:'1%', 
    bottom:'2%',
    'z-index': '10000'
  }, 1000, "swing", function(){
    $fullview.find('.results-personal').isotope('layout');
  });

  //$search.find('.tileview').fadeOut();

  $('body').css('overflow', 'hidden');
};


//==========================================================
// ONLOAD
//==========================================================

/*
 * Topbar hide and slide up/down on mouseover behaviour
 */
$(function(){
  
  // grab the initial top offset of the navigation 
  var stickyNavTop = $(tobparSelector).offset().top;

    // our function that decides weather the navigation bar should have "fixed" css position or not.
    var stickyNav = function(){
      var scrollTop = $(window).scrollTop(); // our current vertical position from the top

      // if we've scrolled more than the navigation, change its position to fixed to stick to top,
      // otherwise change it back to relative
      if (scrollTop > (stickyNavTop+5) ){ 
        $(tobparSelector).addClass('sticky');
        $(tobparSelector).find(".folder").slideUp();
        $("#top-nav").css('border-bottom','1px solid #ddd');
        $(".inner-middle").addClass('inner-middle-scrolled');
      } else {
        $(tobparSelector).removeClass('sticky'); 
        $(tobparSelector).find(".folder").slideDown();
        $("#top-nav").css('border-bottom','1px solid transparent');
        $(".inner-middle").removeClass('inner-middle-scrolled');
        $(window).trigger('resize');
      }
  };

  stickyNav();

  // and run it again every time you scroll
  $(window).scroll(function() {
    stickyNav();
  });

  /*$(tobparSelector).mouseenter(function(){
    $(tobparSelector).find(".folder").stop().slideDown();
  });
  $(tobparSelector).mouseleave(function(){
    var scrollTop = $(window).scrollTop();
    if (scrollTop > (stickyNavTop+5) ){
      $(tobparSelector).find(".folder").stop().slideUp();
    } 
  });*/

});



/*
 * search tiles behaviour
 */
$(function(){
 	store_sizes();
 	resizeBoxes();
 	$(window).resize(function(){
 		resizeBoxes();
 	});
});



/*
 * Filtering logic
 */
$(function(){

  var months = new Array("Jan", "Feb", "Mar", 
"Apr", "May", "Jun", "Jul", "Aug", "Sep", 
"Oct", "Nov", "Dec");
  var today = new Date();

  $("#dateslider").dateRangeSlider({
    //step:{
    //  days: 1
    //},
    valueLabels:"show",
    durationIn: 1000,
    durationOut: 1000,
    defaultValues: {
      max: today,
      min: (new Date()).setDate(today.getDate()-7)
    },
    bounds:{
      min: (new Date()).setMonth(today.getMonth()-3),
      max: new Date()
    },
    scales: [{
      first: function(value){ return value; },
      end: function(value) {return new Date(); },
      next: function(value){
        var next = new Date(value);
        return new Date(next.setMonth(value.getMonth() + 1));
      },
      label: function(){return "";},
      format: function(tickContainer, tickStart, tickEnd){
        tickContainer.addClass("month-ticker");
      }
    },
    {
      first: function(value){ return value; },
      end: function(value) {return new Date(); },
      next: function(value){
        var next = new Date(value);
        next.setDate(value.getDate() + 1);
        return next
      },
      label: function(){return "";},
      format: function(tickContainer, tickStart, tickEnd){
        tickContainer.addClass("date-ticker");
      }
    }],
    formatter:function(val){
        var days = val.getDate(),
          month = val.getMonth(),
          year = val.getFullYear();
        if(today.getDate() == days && today.getMonth() == month &&today.getFullYear() == year){
          return "Today";
        }else{
          return days + " " + months[month];// + " " + year;
        }
      }
  });

  $("#dateslider").on('valuesChanging', function(ev, data){
    var max = data.values.max;
    var min = data.values.min;
    if(min.getDate() == max.getDate() && min.getMonth() == max.getMonth() && min.getFullYear() == max.getFullYear()){
        min.setDate(min.getDate()-1);
        //$('#dateslider').dateRangeSlider('values', min,max);
    }
    current_date_filter = make_filter_date(data.values.min, max);
    order_and_filter();
  });

  var search_changed = function(){
    var searched = $("#termsearch-input").val();
    current_term_filter = make_filter_terms(searched);
    order_and_filter()
  };
  $("#termsearch-input").on("keypress", search_changed);
  $("#termsearch-input").on("keyup", search_changed);

  $("#sortby-most-personal").click(function(){$("#searches").isotope({sortBy:"personalisation", sortAscending:false});});
  $("#sortby-time-ascending").click(function(){$("#searches").isotope({sortBy:"timestamp", sortAscending:true});});
  $("#sortby-time-descending").click(function(){$("#searches").isotope({sortBy:"timestamp", sortAscending:false});});
  $("#sortby-alpha").click(function(){$("#searches").isotope({sortBy:"terms", sortAscending:true});});

});

$(function() {
  if($(window).width() > 768){
    // Hide all but first tab content on larger viewports
    $('.accordion__content:not(:first)').hide();
    // Activate first tab
    $('.accordion__title:first-child').addClass('active');
  } else {
    
    // Hide all content items on narrow viewports
    $('.accordion__content').hide();
  };

  // Wrap a div around content to create a scrolling container which we're going to use on narrow viewports
  $( ".accordion__content" ).wrapInner( "<div class='overflow-scrolling'></div>" );

  // The clicking action
  $('.accordion__title').on('click', function() {
    $('.accordion__content').hide();
    $(this).next().show().prev().addClass('active').siblings().removeClass('active');
    //if slider visible, trigger redraw
    $('#dateslider').dateRangeSlider('resize');
  });
});

var containingSelector = "#searches";
var boxSelector = ".search";
var topbarSelector = "#topbar";

var stickyNav = function(){
	var stickyNavTop = $(topbarSelector).offset().top;
    var scrollTop = $(window).scrollTop(); // our current vertical position from the top

    // if we've scrolled more than the navigation, change its position to fixed to stick to top,
    // otherwise change it back to relative
    if (scrollTop > (stickyNavTop+5) ){ 
    	$(topbarSelector).addClass('sticky');
    	$(topbarSelector).find(".folder").slideUp();
    } else {
    	$(topbarSelector).removeClass('sticky'); 
    	$(topbarSelector).find(".folder").slideDown();
    }
};


var enable_topbar = function(){
	$(window).scroll(stickyNav);
};
var disable_topbar = function(){};

var resizeBoxes = function (){
	var original_width = $(boxSelector).outerWidth();
 	var original_height = $(boxSelector).outerHeight();
 	var aspect_ratio = original_width / original_height;
	var containerWidth=$(containingSelector).width();
	var width_ratio = containerWidth/original_width;
	var num_boxes = Math.floor(width_ratio);
	var remainingWidth = containerWidth - (num_boxes * original_width);
	var width_increment = remainingWidth/num_boxes;
	var new_width = original_width+width_increment;
	var new_height = new_width/aspect_ratio;
	console.log(containerWidth,width_ratio,num_boxes,remainingWidth,width_increment,new_width,new_height);
	$(boxSelector).width(new_width);
	$(boxSelector).height(new_height);
};

/**
 * 
 */
var boxfade = function(){
    $(boxSelector).each( function(i){
        var box_top =  $(this).position().top;
        var box_bottom = $(this).position().top + $(this).outerHeight();
        var window_bottom = $(window).scrollTop() + $(window).height();
        
        /* If the object is completely visible in the window, fade it it */
        if( window_bottom > box_bottom ){
            $(this).fadeIn(1000);
        }
        if( box_top > window_bottom ){
        	$(this).hide();
        }  
    }); 
};

var enable_boxes = function(){
	$(window).resize(resizeBoxes);
	$(window).scroll(boxfade);
};
var disable_boxes = function(){};

/*
 * Topbar hide and slide up/down on mouseover behaviour
 */
$(function(){
	// grab the initial top offset of the navigation 
	var stickyNavTop = $(topbarSelector).offset().top;

	stickyNav();
	enable_topbar();

	$(topbarSelector).mouseenter(function(){
		$(topbarSelector).find(".folder").stop().slideDown();
	});
	$(topbarSelector).mouseleave(function(){
		var scrollTop = $(window).scrollTop();
		if (scrollTop > (stickyNavTop+5) ){
			$(topbarSelector).find(".folder").stop().slideUp();
		}	
	});

});


/*
 * search boxes behaviour
 */
 $(function(){
 	resizeBoxes();
 	enable_boxes();
 });

 /*
  * Box transition behaviour
  */
  $(function(){
  	$(".expander").click(function(){
  		var x_0 = $(this).offset().left - $(document).scrollLeft();
  		var y_0 = $(this).offset().top - $(document).scrollTop();
  		var x_1 = x_0 + $(this).outerWidth();
  		var y_1 = y_0 + $(this).outerHeight();
  		console.log(x_0,y_0,x_1,y_1);
  		var settings = {
  			position: 'fixed',
  			top: y_0+'px',
  			width:(x_1-x_0)+'px',
  			left: x_0+'px',
  			height:(y_1-y_0)+'px',
  			'z-index': 10,
  			'background-color':'red'
  		};
  		console.log(settings);
  		$(this).css(settings);
  		$(this).animate({
  			width:'100%', 
  			height: '100%', 
  			top:'0px',
  			left:'0px', 
  			bottom:'0px', 
  			'z-index': "100"
  		}, 1000);

  		disable_topbar();
  		disable_scrollEffects();

  		/*
  		$(this).css({
  			position: 'fixed',
  			top: '0px',
  			bottom:'0px',
  			left: '0px',
  			height:'100%',
  			
  			'background-color':'#ff0000',
  			float: 'none'
  		});*/
  	});
  });function zeroPad(num, size){ 
  return ('000000000' + num).substr(-size); 
}

function format_date(date){
  var days = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
  var months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

  var hours  = (date.getHours() % 12).toString();
  var minutes = date.getMinutes()

  var datestring = ((hours == 0)?"12":hours) + ":" + zeroPad(minutes,2);
  datestring += "" + (date.getHours()/12 > 1)?"pm,":"am,";
  datestring += " on " + days[date.getDay()];
  datestring += " " + date.getDate();
  datestring += " " + months[date.getMonth()];
  datestring += " " + date.getFullYear(); 

  return datestring;
}

function augment_data(data){

  data.date = format_date(new Date(data.timestamp));
  
  data.percentage = Math.round(data.score * 100);

  return data;
}

$(function(){
  console.log("Home.js");
  
  var search_item_template = Handlebars.compile($("#search-template").html());
  

  var onSuccess = function(searches){
    var earliest_search_date = new Date();

    searches.forEach(function(search){
      var data = search;

      // find the earliest timestamp for filtering on
      if(search.timestamp < earliest_search_date.getTime() ){
        earliest_search_date.setTime(search.timestamp);
      }

      data.personalScores = scores_to_data_template(results_to_scores(search));
      
      var $search = $($.parseHTML(search_item_template(augment_data(data))));

      $search.data("search", data);
      
      $search.css({'background-color': score2color(search.score)});

      $('#searches').append($search);
    });

    $(".tileview").click(function(){
      expand_tile(this);
    });

    reset_slider_bounds(earliest_search_date, new Date());
    store_sizes();
    resizeBoxes();
    order_and_filter();
  };
  
  get_searches(onSuccess);

});

.bubbleviz{
  position: fixed;
  width:100%;
  height:10px;
  top:0px;
  background:green;
  z-index:10000;
}/**
 * inject.js
 */


function storeResults(url, personal, anonymous, search_terms){
  var object_to_store = {
    url: url, 
    anonymous: anonymous, 
    personal:personal,
    terms: search_terms,
    timestamp: (new Date()).getTime(),
  };
  
  chrome.storage.local.get("searches", function(store){
   
    if(store.searches){
      store.searches.push(object_to_store);
      chrome.storage.local.set({searches: store.searches}, function(){
        console.log("storage set OK");
      })
    }else{
      chrome.storage.local.set({searches: [object_to_store]}, function(){
        console.log("storage set OK, first time.");
      });
    }
  });

}

function convert_url_to_server_url(url){
  // What we want : https://google.com/search?q=blah+blah+blah
  // two types of document URL:
  //  - http://google.com/webhp#q=abc+def
  //  - http://google.com/webhp?q=abc+def

  var PREFIX = "https://www.google.com/search"

  var server_search_url = url;
  

  var parser = document.createElement('a');
  parser.href =  server_search_url;
  
  var index = parser.href.indexOf(parser.search);
  var query = parser.search;
  var hash = parser.href.slice(index + parser.search.length, parser.href.length);
  
  if(hash){ 
    server_search_url = PREFIX + "?" + hash.slice(1,hash.length);
  }else if(query && !hash){
    server_search_url = PREFIX + query;
  }
  
  return server_search_url;
}


/**
 * Scrape a page for google search results on the current page
 */
function scrapeForResults(){
    var results = parseDocumentForResults(document);
    var search_terms = scrapeSearchTerms(document);
  
    if(results.length > 0){
      console.log("Personal results: ", JSON.stringify(results));

      var request = {url: convert_url_to_server_url(document.URL)};
      
      var onResponse = function(response) {
        console.log("Anonymous results: ", JSON.stringify(response));
        if(!response.error){
          storeResults(document.URL, results, response, search_terms);
        }else{
          console.log("ERROR: Querying server failed", response.error);
        }
      };
      

      chrome.runtime.sendMessage(request, onResponse );
    }
}

function main(){
  console.log("Bubbleviz starting");

  // Add visual to page to show we're active
  var bubbleviz = document.createElement("div");
  bubbleviz.className = "bubbleviz";
  document.getElementsByTagName('body')[0].appendChild(bubbleviz);
        
    // On url change, do scrape page
  function handleChanges(newHash, oldHash){
    console.log("Hash changed "+oldHash+" -> "+newHash);
    setTimeout(scrapeForResults, 750);
  }

  hasher.changed.add(handleChanges); 
  hasher.initialized.add(handleChanges); 
  hasher.init();
}

var readyStateCheckInterval = setInterval(function() {
  if (document.readyState === "complete") {
    clearInterval(readyStateCheckInterval);
    main();
  }
}, 10);

var handleFiles = function(){
    console.log("file set changed");
   var filelist = this.files;
   var file = filelist[0];
   var reader = new FileReader();
   var fileLoadedHandler = function(event){
       var fileData = event.target.result;
       var jsonData = JSON.parse(fileData);
       console.log(jsonData); 
       chrome.storage.local.set({"searches": jsonData.search_history}, function(store){
           if(runtime.lastError){
               console.log(runtime.lastError);
           }else{
               console.log("set searches locally to", jsonData);
           }
       });
   };
   reader.onload = fileLoadedHandler;
   reader.readAsBinaryString(file);
};


$(function(){
    $("#clear-profile").click(function(){
        chrome.storage.local.set({searches: []}, function(){
            console.log("Cleared extension profile");
        });
    });

    $("#profile-download").click(function(){
        build_history_dataset(function(items){
            chrome.storage.local.get("searches", function(store){
                var user_profile = {
                    view_history : items,
                    search_history : store.searches
                };
                downloadAsJSON(user_profile, "profile.json");
            });
        });
    });

    
    
    document.getElementById("profile-upload").addEventListener("change", handleFiles, false);
});$(function(){
  var container = document.querySelector('.masonry');
  var msnry = new Masonry( container, {
    // options
    "columnWidth": ".grid-sizer",
    itemSelector: '.item'
  });
});

var months = ["Jan", "Feb", "Mar", 
    "Apr", "May", "Jun", "Jul", "Aug", "Sep", 
    "Oct", "Nov", "Dec"];
var days = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];

var date_data_filter = function (min,max,attr){
  if(!attr){
    attr = 'timestamp';
  }
  var filter = function(item){
    if (min.getTime() < item[attr] && item[attr] < max.getTime() ){
      //console.log("true", min, max, search);
      return true;
    }else{
      //console.log("false", min, max, search);
      return false;
    }
  };
  return filter;
};


var fetch_clusters = function(searches, onSuccess, onFailure){
  console.log("[report.js]: fetching cluster info for "+searches.length+" searches");
  // handle fetch errors dumbly
  function onFail(msg){ 
    console.log(msg); alert(msg); 
  };
  
  var _onSuccess = function(results){
    if(onSuccess && (typeof onSuccess) == "function"){
      onSuccess(results);
    }
  }
  var _onFailure = function(message){
    if(onFailure && (typeof onFailure) == "function"){
      console.log(message); alert(message);
    }
  }
  console.log('Getting categories');
  searches_to_categorised_results(searches, _onSuccess, _onFailure);
};

var spin_all_the_things = function(selector){
  var opts = {
    lines: 2, // The number of lines to draw
    length: 20, // The length of each line
    width: 10, // The line thickness
    radius: 0, // The radius of the inner circle
    corners: 0, // Corner roundness (0..1)
    rotate: 0, // The rotation offset
    direction: 1, // 1: clockwise, -1: counterclockwise
    color: '#000', // #rgb or #rrggbb or array of colors
    speed: 4, // Rounds per second
    trail: 60, // Afterglow percentage
    shadow: false, // Whether to render a shadow
    hwaccel: false, // Whether to use hardware acceleration
    className: 'spinner', // The CSS class to assign to the spinner
    zIndex: 2e9, // The z-index (defaults to 2000000000)
    top: '50%', // Top position relative to parent
    left: '50%' // Left position relative to parent
  };
  $(selector).each(function(i){
    // this is where we would initialise the spinners on our page. 
    // Because we're selecting by elements the spinner will need 
    // need an element on the page that can retrieve using the selector
    new Spinner(opts).spin(this);
  })

};

/*
 * Page init
 */
$(function(){
  var searches = [];
  var history = [];
  var today = new Date();

  spin_all_the_things('.spinning');

  $("#dateslider").dateRangeSlider({
    //step:{
    //  days: 1
    //},
    valueLabels:"show",
    durationIn: 1000,
    durationOut: 1000,
    defaultValues: {
      max: today,
      min: (new Date()).setDate(today.getDate()-7)
    },
    bounds:{
      min: (new Date()).setMonth(today.getMonth()-3),
      max: new Date()
    },
    scales: [{
      first: function(value){ return value; },
      end: function(value) {return new Date(); },
      next: function(value){
        var next = new Date(value);
        return new Date(next.setMonth(value.getMonth() + 1));
      },
      label: function(){return "";},
      format: function(tickContainer, tickStart, tickEnd){
        tickContainer.addClass("month-ticker");
      }
    },
    {
      first: function(value){ return value; },
      end: function(value) {return new Date(); },
      next: function(value){
        var next = new Date(value);
        next.setDate(value.getDate() + 1);
        return next
      },
      label: function(){return "";},
      format: function(tickContainer, tickStart, tickEnd){
        tickContainer.addClass("date-ticker");
      }
    }],
    formatter:function(val){
        var days = val.getDate(),
          month = val.getMonth(),
          year = val.getFullYear();
        if(today.getDate() == days && today.getMonth() == month &&today.getFullYear() == year){
          return "Today";
        }else{
          return days + " " + months[month];// + " " + year;
        }
      }
  });

  get_searches(function(srchs){
    console.log("Got "+srchs.length+" searches from chrome.")
    searches = srchs;

    var timestamps = searches.map(function(search){return search.timestamp;})
    var maxdate = new Date(Math.max.apply(null, timestamps));
    var mindate = new Date(Math.min.apply(null, timestamps))
    reset_slider_bounds(mindate, maxdate);

    console.log("We initialise our report with "+searches.length+" searches");
    // Initialise the graphs based on the slider's default range.
    var vals = $('#dateslider').dateRangeSlider('values');

    var filtered_searches = searches.filter(date_data_filter(vals.min, vals.max));

    // These graphs only need the searches to be drawn
    
    redraw_daily_graph(filtered_searches);
    redraw_hourly_graph(filtered_searches);

    build_history_dataset(function(hstry){
      console.log("Got "+hstry.length+" history items from chrome.");
      history = hstry;

      var filtered_history = history.filter(date_data_filter(vals.min,vals.max,'lastVisitTime'));
      // these graphs need history too :)
      redraw_toplinks_graph(filtered_history);
      redraw_influence_graph(filtered_searches, filtered_history, searches2results(filtered_searches));
      
      fetch_clusters(filtered_searches, function(results){ //Success!
        //these graphs need the clustered results
        redraw_cluster_graph(results);
      }, function(msg){ //Error!
          console.error(msg); alert(msg);
      });

    });
  });

  $("#dateslider").on('valuesChanging', function(ev, data){
    var max = data.values.max;
    var min = data.values.min;
    if(min.getDate() == max.getDate() && min.getMonth() == max.getMonth() && min.getFullYear() == max.getFullYear()){
        min.setDate(min.getDate()-1);
        //$('#dateslider').dateRangeSlider('values', min,max);
    }

    var filtered_searches = searches.filter(date_data_filter(min, max));
    var filtered_history = history.filter(date_data_filter(min,max,'lastVisitTime'));

    // We don't need to re-fetch the data for these.
    redraw_daily_graph(filtered_searches);
    redraw_hourly_graph(filtered_searches);
    redraw_toplinks_graph(filtered_history);
    redraw_influence_graph(filtered_searches, filtered_history, searches2results(filtered_searches));

    // we need to call carrot for this one
    fetch_clusters(filtered_searches, function(results){ //Success!
      //these graphs need the clustered results
      redraw_cluster_graph(results);
    }, function(msg){ //Error!
        console.error(msg); alert(msg);
    });
    
  });



  
});


/*
 * Top links horizontal bars graph
 */
var redraw_toplinks_graph = function(history){
    console.log("[report.js]: redraw_toplinks_graph got "+ history.length + " history items");

    var selector = '#top-links';

    $(selector).html("");
    $(selector).parent().find('.spinning').show();

    var indexedHistory = _.reduce(history, function(indexedHistory, historyItem){
      var host = url2host(historyItem.url)
      if(host in indexedHistory){
        indexedHistory[host] += 1;
      }else{
        indexedHistory[host] = 1;
      }
      return indexedHistory;
    }, {});

    var data = _(indexedHistory).map(function(v,k){
      return {y:k, x:v};
    }).sortBy(function(e){
      return -e.x;
    }).take(10).reverse().value();
    console.log(data);  

  var chart = d4.charts.row();
  
  chart.outerWidth($(selector).width())
    .margin({
      left: 0,
      top: 0,
      right: 0,
      bottom: 160
    })
  chart.mixout('xAxis');
  chart.mixout('yAxis');
  chart.using('bars', function(bar){
    bar.rx(4);
  });
  chart.using('barLabels', function(label){
     label.text(function(d){
        return d.y;
     });
     label.x(5);
     label.classes(label.classes()+' custom-class');
  });

  d3.select(selector)
    .datum(data)
    .call(chart);

  $(selector).parent().find('.spinning').hide();
};


/*
 * Bubble categories chart 
 */
var bubble_chart_aspect = null;
var redraw_cluster_graph = function(results){
  console.log("[report.js]: redraw_cluster_graph got "+results.length+ "results ");
  var bubble_graph_selector = "#bubble-chart";

  var pw = $(bubble_graph_selector).parent().width();
  var ph = $(bubble_graph_selector).parent().height();

  if(!bubble_chart_aspect){
    bubble_chart_aspect = pw / ph;
  }

   /* bubble chart */
   var diameter = 550,
    format = d3.format(",d"),
    color = d3.scale.category20c();

  var bubble = d3.layout.pack()
      .sort(null)
      .size([pw, ph])
      .padding(40);

var svg = d3.select(bubble_graph_selector).append("svg")
    .attr("width", '100%')
    .attr("height",'100%')
    .attr("class", "bubble");
  
var root =  { "children": [
      {"className": "perfectmasonry ", "value": 2000},
      {"className": "Agglomerative Cluster", "value": 3938},
      {"className": "Community Structure", "value": 3812},
      {"className": "Hierarchical Cluster", "value": 6714},
      {"className": "Merge Edge", "value": 743},
      {"className": "Agglomerative Cluster", "value": 4343},
      {"className": "Community Structure", "value": 4812},
      {"className": "Hierarchical Cluster", "value": 5714},
      {"className": "Merge Edge", "value": 143},
      {"className": "Community Structure", "value": 6812},
      {"className": "Hierarchical Cluster", "value": 714}
     ]
    };
  var tip = d3.tip()
    .attr('class', 'd3-tip')
    .offset([-10, 0])
    .html(function(d) {
      return  "<br/> Searches: <span style='color:red'>" + d.className+ + "</span>";
    })

  svg.call(tip);

  var node = svg.selectAll(".node")
      .data(bubble.nodes(root).filter(function(d) { return !d.children; }))
      .enter().append("g")
        .attr("class", "node")
        .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });

  node.append("title")
      .text(function(d) { return d.className + ": " + format(d.value); });

  node.append("circle")
      .attr("r", function(d) { return d.r; })
      .style("fill", "#3666c9" )
      

  node.append('foreignObject')
    .attr('x', function(d){return -d.r;})
    .attr('y', function(d){return -d.r;})
    .attr('width', function(d){return d.r*2;})
    .attr('height', function(d){return d.r*2;})
    .on('mouseover', tip.show)
    .on('mouseout', tip.hide)
    .append("xhtml:body")
      .attr('class', 'label')
      .html(function(d){return '<div class="innerlabel">'+d.className+'</div>';})//function(d) { return "<p>"+d.className+"</p>"; })
  
  svg.selectAll(".node").filter(function(d,i){
    //console.log(d3.select(this));
    //$elem.find('foreignObject body div.innerlabel').width();
  });

d3.select(self.frameElement).style("height", diameter + "px");

  /* END bubble chart */
};
  
  
  
 /*
  * Hourly breakdown bar chart
  */
var redraw_hourly_graph = function(searches) {  
  console.log("[report.js]: redraw_hourly_graph got "+ searches.length+" searches");

  $("#bar-chart-1").html("");
  $("#bar-chart-1").parent().find('.spinning').show();

  var labels = {
    "0": "12am",
    "1": "1am",
    "2": "2am",
    "3": "3am",
    "4": "4am",
    "5": "5am",
    "6": "6am",
    "7": "7am",
    "8": "8am",
    "9": "9am",
    "10": "10am",
    "11": "11am",
    "12": "12pm",
    "13": "1pm",
    "14": "2pm",
    "15": "3pm",
    "16": "4pm",
    "17": "5pm",
    "18": "6pm",
    "19": "7pm",
    "20": "8pm",
    "21": "9pm",
    "22": "10pm",
    "23": "11pm"
  };

  var graphData = {};

  // add 0 for hours
  for(var h = 0; h < 24; h++){
    if(!(h in graphData)){
      graphData[h] = 0;
    }
  }

  searches.forEach(function(search){
    var when = new Date(search.timestamp);
    graphData[when.getHours()] += 1;
  });

  // formats it suitably for consumption
  var graphData = _.reduce(graphData, function(res, v,k){
    if(k in labels){
      res.push({x:labels[k], y:v});
    }else{
      res.push({x:"", y:v})
    }
    
    return res;
  }, []);


  var graphData = _.sortBy(graphData, graphData,function(o){
    return k.x;
  });

  var chart = d4.charts.column()
    .mixout('yAxis')
    .outerWidth($('#bar-chart-1').width())
    .margin({
      left: 11,
      top: 0,
      right: 11,
      bottom: 240
    })
  
  chart.using('bars', function(bar){
    bar.rx(2);
    bar.ry(2);
  });
  
  d3.select('#bar-chart-1')
    .datum(graphData)
    .call(chart);

  $("#bar-chart-1").parent().find('.spinning').hide();
}


/* 
 * Daily breakdown 
 */
var redraw_daily_graph = function(searches){
  console.log("[report.js]: redraw_daily_graph got "+ searches.length+" searches");
   
  $("#bar-chart-2").html("");
  $("#bar-chart-2").parent().find('.spinning').show();

  var labels = {
    "0": "Sunday",
    "1": "Monday",
    "2": "Tuesday",
    "3": "Wednesday",
    "4": "Thursday",
    "5": "Friday",
    "6": "Saturday",
  };

  var graphData = {};

  // add 0 for hours
  for(var h = 0; h < 7; h++){
    if(!(h in graphData)){
      graphData[h] = 0;
    }
  }

  searches.forEach(function(search){
    var when = new Date(search.timestamp);
    graphData[when.getDay()] += 1;
  });

  // formats it suitably for consumption
  var graphData = _.reduce(graphData, function(res, v,k){
    if(k in labels){
      res.push({x:labels[k], y:v});
    }else{
      res.push({x:"", y:v})
    }
    return res;
  }, []);


  var graphData = _.sortBy(graphData, graphData,function(o){
    return k.x;
  });

  var chart = d4.charts.column()
  .mixout('yAxis')
  .outerWidth($('#bar-chart-2').width())
    .margin({
      left: 11,
      top: 0,
      right: 11,
      bottom: 240
    })
  
  chart.using('bars', function(bar){
    bar.rx(2);
  bar.ry(2);
  
  });
  d3.select('#bar-chart-2')
    .datum(graphData)
    .call(chart);

  $("#bar-chart-2").parent().find('.spinning').hide();
  /* END daily breakdown */
};
  
  


/*
  We want to show as text:
  + Total number of searches made
  + Total number of results shown to the user
  + Total number of links visited in the period
 We want to show relative sizes between:
  + Number of links visited
  + Number of links visited due to a search
  + Number of links visited due to personalisation
 Another way to say this is:
 
  + links visited organically / links visited via google search
 
 Of those links visited via google search:
 
  + links visisted from neutral search result
  + links visited from personalised search results
*/
var redraw_influence_graph = function(searches, history, results){
  console.log("[report.js]: redraw_influence_graph got "+searches.length+" searches "+ history.length+ " history items "+results.length+" results");
  console.log(searches);
  conso1111le.log(searches2results(searches));
  var resultIndex = _.reduce(searches2results(searches), function(resultIndex, result){
    resultIndex[url2host(result.url)] = result.category;
    return resultIndex;
  }, {});

  var historyIndex = _.reduce(history, function(indexedHistory, historyItem){

    indexedHistory[url2host(historyItem.url)] = 0;
    return indexedHistory;
  }, {});




  /*  pie 1 */
  var width = 100,
    height = 100,
    radius = Math.min(width, height) / 2;

  var color = d3.scale.ordinal()
      .range(["#98abc5", "#8a89a6", "#7b6888", "#6b486b", "#a05d56", "#d0743c", "#ff8c00"]);

  var arc = d3.svg.arc()
      .outerRadius(radius - 10)
      .innerRadius(0);

  var pie = d3.layout.pie()
      .sort(null)
      .value(function(d) { return d.population; });

  var svg = d3.select("#pie-1").append("svg")
      .attr("width", width)
      .attr("height", height)
    .append("g")
      .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");


  var data = [
    {
      "age":"<5",
      "population":2704659
    },
    {
      "age":"5-13",
      "population":4499890
    }
  ];

  data.forEach(function(d) {
    d.population = +d.population;


    var g = svg.selectAll(".arc")
        .data(pie(data))
      .enter().append("g")
        .attr("class", "arc");

    g.append("path")
        .attr("d", arc)
        .style("fill", function(d) { return color(d.data.age); });

    g.append("text")
        .attr("transform", function(d) { return "translate(" + arc.centroid(d) + ")"; })
        .attr("dy", ".35em")
        .style("text-anchor", "middle")
        .text(function(d) { return d.data.age; });
  });

}; // end pie 1





var sizeToFit = function(){
  //var chart = $("#chart");
  //chart.width( $(window).width() );
  //chart.height( $(window).height() );
  var kids = $("#chart > *");
  kids.width( $(window).width() );
  kids.height( $(window).height() );
};



$(function(){
  chrome.storage.local.get("searches", function(store){
    var data = store.searches.map(results_to_scores);
    visualise_as_radialplot(data);
    sizeToFit();
    $(window).on('resize', sizeToFit);
  });


  $('#clear').click(function(){
    chrome.storage.local.set({searches: []}, function(){
      console.log("Cleared local storage");
      $('#chart svg').remove();
    })
  });

  $('#saveimg').click(function(){
    var opts = {
      lines: 15, // The number of lines to draw
      length: 0, // The length of each line
      width: 4, // The line thickness
      radius: 8, // The radius of the inner circle
      corners: 0.6, // Corner roundness (0..1)
      rotate: 0, // The rotation offset
      direction: 1, // 1: clockwise, -1: counterclockwise
      color: '#000', // #rgb or #rrggbb or array of colors
      speed: 1.4, // Rounds per second
      trail: 31, // Afterglow percentage
      shadow: false, // Whether to render a shadow
      hwaccel: false, // Whether to use hardware acceleration
      className: 'spinner', // The CSS class to assign to the spinner
      zIndex: 2e9, // The z-index (defaults to 2000000000)
      top: '50%', // Top position relative to parent
      left: '50%' // Left position relative to parent
    };

    var spinner = new Spinner(opts).spin();
    console.log("Saving visualisation to gallery");
    
    var onError = function(jqXHR, textStatus, errorThrown){
      spinner.stop();
      $("#saveimg").addClass("fail");
      $("#saveimg .spinnerContainer").hide();
    };
    
    var onSuccess = function(data){
      spinner.stop();
      $("#saveimg").addClass("succeed");
      $("#saveimg .spinnerContainer").hide();
    };

    $("#saveimg .spinnerContainer")[0].appendChild(spinner.el);
    $("#saveimg .spinnerContainer").show();

    $.ajax({
      dataType: "json",
      type: "POST",
      processData: false,
      url: "http://bubbleviz.herokuapp.com/api/save/visualisation",
      data: $('#chart').html(),
      success: onSuccess,
      error: onError
    })
  });
})




  var width = 1000;
  var height = 1000;



var visualise_as_radialplot = function(searches){
  
  var symbol_width = 10;
  var center_empty_radius = 235; //( (symbol_width+4) * searches.length) / (2*Math.PI);
  var line_length = (Math.min(width, height)/2) - center_empty_radius;
  var maximum_num_results = Math.max.apply(null, searches.map(function(results){return results.length;}));
  var separation = (line_length - center_empty_radius) / (maximum_num_results-1);
  var text_offset = 10;
  var gap_between_dots = 2;
  var cache = {radius:{},distance:{}};

  var tip = d3.tip().attr('class', 'd3-tip').html(function(d) { 
    return d.result; 
  });

  var svg = d3.select("#chart").append("svg")
    .attr("viewBox", "0 0 "+width+" "+height)
    .attr("preserveAspectRation", "xMidYMid")
    .call(tip)
  
  var searchgroup = svg.append("g")
    .attr("transform", "translate(" + width/2 + "," + height/2 + ")");

  
  var searchesEnter = searchgroup.selectAll('g')
    .data(searches)
    .enter()

  var isReversed = function(d,i){
    var angle = (360/searches.length)*i;
    if(angle > 90 && angle < 270){
      return true;
    }
    return false;
  }
  
  var radius_of_dot = function(d,i){
    if( cache.radius[i]){ return cache.radius[i]; };
    
    var r;
    
    //var number_of_searches = searches.length;
    //var circ = 2* Math.PI * distance_from_origin(d, i);
    //var width = (circ / (number_of_searches)) - gap_between_dots;
    
    // r=3@distance=70, r=6@distance=200
    // a=3/130, r=ad
    var a = -0.05; // growth rate
    var c = 4.5; // starting value
    r = a*i + c;
    
    if(r>6){r = 6}
    cache.radius[i] = r;
    return r;
  };
  
  var distance_from_origin = function(d, i){
    if( cache.distance[i]){ return cache.distance[i]; };
    var d;
    if(i == 0){
      d = center_empty_radius;
    }else{
      d = (2*radius_of_dot(d,i-1))+distance_from_origin(d,i-1)+gap_between_dots;
    }
    cache.distance[i] = d;
    return d;
    
  };
  
  var applyDefaultStyle = function(d3selection){
      /*d3selection.select('text')
        .attr('x', line_length+text_offset )
        .attr('y', 4)
        .attr("font-family", "sans-serif")
        .attr('fill', '#aaaaaa')
        .attr('font-size', '10px');
      d3selection.select('line')
        .style('stroke', 'black')
        .attr('stroke-width', '1px');*/
      
    var circles = d3selection.selectAll('circle');
      circles.attr('r', radius_of_dot)
      circles.attr('cx', distance_from_origin);
  };

  var applyHoverStyle = function(d3selection){
    d3selection.selectAll('circle')
      .attr('r', 5);

  };

  var srchs = searchesEnter.append('g')
    .attr('class', "search")
    .attr('transform', function(d,i){
      //return 'rotate('+(360/searches.length)*i+')';
      var angle_per_search = 360/150;
      var starting_angle = (-90) - (0.5 * searches.length*angle_per_search);
      return 'rotate('+(starting_angle+angle_per_search*i)+')';
    })
    .on('mouseover', function(d,i){
      applyHoverStyle(d3.select(this));
    })
    .on('mouseout', function(d,i){
      applyDefaultStyle(d3.select(this));
      
    })

  /*
  srchs.append('text')
      .text(function(d){
        return d[0].terms; 
      })
      .attr('transform', function(d,i){
        if(isReversed(d,i)){
           return 'rotate(180 '+(line_length+text_offset)+',0)';
        }
        return null;
      })
      .attr('text-anchor', function(d,i){
        return isReversed(d,i)?"end":"start";
      })
          
  srchs.append('line')
      .attr('x1', center_empty_radius)
      .attr('x2', line_length)
  */
  srchs.selectAll('g')
    .data(function(d){
      d.sort(result_comparator);
      return d;
    })
    .enter()
    .append('circle')
    .attr('cx', function (d,i){
      return (i*separation) + center_empty_radius;
    })
    .attr('fill', function(d,i){
      if(d.category == "personal"){ return "red"; }
      if(d.category == "anonymous"){ return "blue"; }
      if(d.category == "both"){ return "green"; }
      return "grey"
    });

    srchs.each(function(d,i){ applyDefaultStyle(d3.select(this));});
  
};/*
NATALIE IS AWESOME!!!!
<div id="infobox" class="{{category}}" style="display:none;">
  <p class="category">Category: <span id="category-placeholder">{{category}}</span></p>
  <p>Search Terms: <a class="search" href="{{search_url}}">{{terms}}</a></p>
  <p>Result: <a class="result" href="{{url}}">{{result}}</a></p>
  <p class="rank">User Rank: <span id="rank-placeholder">{{personal_rank}}</span></p>
</div>
*/


$(function(){
  var lastMoved = 0;
  var anchor = null;
  var tether = null;
  
  
  
    
  /**
   * We have to wrap evrything that will use the processing API around the sketch function so 
   * we can access the processing.* namespace.
   */ 
   var createSketch  = function(data){
    return function (processing) {
      var showInformation = function(particle){
        var result = particle.result;
        var infobox = $("#infobox");
        infobox.attr('class', result.category);
        infobox.find('.category #category-placeholder').html(result.category);
        infobox.find('.search').attr('href', result.search_url).html(result.terms);
        infobox.find('.result').attr('href', result.url).html(result.result);
        if(result.personal_rank){
          infobox.find('.rank #rank-placeholder').html(result.personal_rank);
          infobox.find('.rank').show(); 
        }else{
          infobox.find('.rank').hide(); 
        }
        
        anchor = $('<a>').css({
          position: 'absolute',
          top: particle.pos.y + 'px',
          left: particle.pos.x + 'px',
          width: particle.radius*2 + 'px',
          height: particle.radius*2 + 'px'
        });
        $('body').append(anchor);
        
        infobox.show();
        
        tether = new Tether({
          element: infobox[0],
          target: anchor[0],
          attachment: 'top left',
          targetAttachment: 'bottom left',
          constraints: [
            {
              to: [20,20,processing.width-20, processing.height-20],
              attachement:'together',
              pin: true
            }
          ]
        });
        
      };
  
  var hideInformation = function(){
    var infobox = $("#infobox");
    infobox.hide();
    tether.destroy();
    anchor.remove();
  };
      
      
      
      
      var getNoise = function(amplitude){
        var noise = new processing.PVector(Math.random()*((Math.random()>0.5)?-1:1), Math.random()*((Math.random()>0.5)?-1:1));
        noise.normalize(); 
        noise.mult(amplitude);
        return noise;
      };
      /**
       * The Particle Object is responsible for movement and display of a particle.
       */
      var Particle = function(options){ 
        this.velMax = options.maxVel;
        this.pos = options.pos;
        this.colour = options.colour;
        this.accFunction = options.accFunction;
        
        this.result = options.result;
        this.oldPos = null;
        this.drawDot = false;
        this.doUpdate = true;
        this.radius = 3.5;
        this.speedState = 'SLOW';
        this.mass = 1;
        this.vel = new processing.PVector(0,0);
        this.acc = new processing.PVector(0,0);
      };
      
      Particle.prototype.updateVelocity = function(VMousePosition){
        var accel = this.accFunction(VMousePosition, this.pos);
        
        if(this.pos.dist(VMousePosition) > 300){
          this.speedState = "FAST";
        }
        
        
        var since_moved = (new Date().getTime()) - lastMoved;
        
        var time_threshold = 2000;
        
        if(since_moved  > time_threshold){
          this.speedState = "SLOW";
        }
        
        var ko = 5;
        var k = (- ko*since_moved)/time_threshold + ko + 1; // how much faster than normal we can go
        
        
        if(this.speedState == "FAST"){
            //accel.add(getNoise(1));
            this.vel.add(accel);
            this.vel.limit(k*this.velMax);
        }else{
            this.vel.add(accel);
            this.vel.limit(this.velMax);
        }
        
      };
      
      Particle.prototype.updatePosition = function(VMousePosition){
        this.pos.add(this.vel);
        if(this.pos.x > processing.width || this.pos.x <0 ){
          this.vel.x *= -1;
        }
        if(this.pos.y > processing.height || this.pos.y <0 ){
          this.vel.y *= -1;
        }
      };
      
      Particle.prototype.update = function(VMousePosition){
        if(this.doUpdate){
          this.updateVelocity(VMousePosition);
          this.oldPos = new processing.PVector(this.pos.x, this.pos.y);
          this.updatePosition(VMousePosition);
        }
      };
      
      Particle.prototype.draw = function(){  
        
        if(this.drawDot){
          processing.noStroke();
          processing.fill(this.colour[0],this.colour[1],this.colour[2]);
          processing.ellipse(this.pos.x, this.pos.y, this.radius*4, this.radius*4);
        }else{
          processing.noStroke();
          //processing.stroke(this.colour[0],this.colour[1],this.colour[2]);
          processing.fill(this.colour[0],this.colour[1],this.colour[2]);
          //processing.point(this.pos.x, this.pos.y);
          //processing.line(this.oldPos.x, this.oldPos.y, this.pos.x, this.pos.y);
          processing.ellipse(this.pos.x, this.pos.y, this.radius*2.1,this.radius*1.9);
        }
      };

      Particle.prototype.select = function(){
        this.drawDot = true;
        this.doUpdate = false;
      };
      Particle.prototype.unselect = function(){
        this.drawDot = false;
        this.doUpdate = true;
      };


      /*
       * We define several potential field for our particles.
       * See the functions plotted at http://fooplot.com/plot/lqvbmcfj5g
       */
      var personalAccelerationFunction = function(VMousePosition, VParticlePosition){ 
        var accel = processing.PVector.sub(VMousePosition, VParticlePosition);
        var dist = accel.mag();
        
        var a = 0.001;
        var b = 0.000000001;
        accel.normalize();
        accel.mult(a*dist+b*Math.pow(dist, 4)); // f = ax
        
        accel.add(getNoise(0.5));
        return accel;
      };
      
      var bothAccelerationFunction = function(VMousePosition, VParticlePosition){ 
        var mass = 1;
        var accel = processing.PVector.sub(VMousePosition, VParticlePosition);
        var dist = accel.mag();
        accel.normalize();

        var n = 100;
        
        var force;
        if( dist < n){
          // Sinusoid force = -sin(PI*dist/n) negative cause it's repulsive
          var theta = Math.PI * dist/n;
          var k = 10;
          force = -(Math.cos(theta)+1) * k; 
        }else{
          // Quadratic force = a(dist - n)^2 
          var a = 0.000005;
          force = Math.pow( (dist-n), 2) * a;
        }
        // f=ma
        accel.mult(force/mass);
        
        accel.add(getNoise(0.5));

        return accel;
      };

      var anonymousAccelerationFunction = function(VMousePosition, VParticlePosition){ 
        var mass = 1;
        var accel = processing.PVector.sub(VMousePosition, VParticlePosition);
        var dist = accel.mag();
        accel.normalize();

        var n = 100;
        
        // reciprocal repulsive force = -a/(dist-n)
        var a = 100;
        var force = -a/(dist)
        
        //weak quadratic attractive force = b(dist)^2
        var b = 0.000005;
        force += b*dist*dist;

        // f = ma
        accel.mult(force/mass);
        
        accel.add(getNoise(0.5));

        return accel;
      };
      







      var options = {
        "personal": {
          pos: new processing.PVector(0,0),
          maxVel: 2.5,
          accFunction: personalAccelerationFunction,
          colour: [255,0,0]
        },
        "both": {
          pos: new processing.PVector(0,0),
          maxVel: 2.5,
          accFunction: bothAccelerationFunction,
          colour: [0,255,0]
        },
        "anonymous": {
          pos: new processing.PVector(0,0),
          maxVel: 2.5,
          accFunction: anonymousAccelerationFunction,
          colour: [100,100,255]
        },
      };    

      var colour_options = {
        "personal": [ //shades of red
          [255,0,0],
          [255,100,100],
          [255,200,200]
        ],
        "both": [ // shades of green
          [0,255,0],
          [100,255,100],
          [200,255,200]
        ],
        "anonymous": [ //shades of blue
          [0,0,255],
          [100,100,255],
          [200,200,255]
        ]
      };
      
      
      var particles = [];
      var selected = null;
      var centerOfMass = null;
      
      var update = function(){
        if(selected){
          particles.forEach(function(particle){
            particle.update(centerOfMass);
          });
        }else{
          var mousePos = new processing.PVector(processing.mouseX, processing.mouseY);
          particles.forEach(function(particle){
            particle.update(mousePos);
          });
        }
      };

      var decayRate = 255;
      var decayAll = function(){
        processing.noStroke();
        processing.fill(254,254,255,decayRate);
        processing.rect(0,0,processing.width,processing.height);
      };

      processing.draw = function() {
        decayAll();
        update();
        
        particles.forEach(function(particle){
          particle.draw();
        });
      };
      
      processing.addResult = function(result, isInjected){
        var pos = new processing.PVector(Math.random()*processing.width,Math.random()*processing.height);
      
        if(isInjected){ 
          console.log("Adding new result to visualisation...");
          var ndist = 450; // distance away from center of mass at which new particles are added
          var com;
          if (centerOfMass){
            com = centerOfMass;
          }else{
            com = new processing.PVector(processing.mouseX,processing.mouseY);
          }
          var n = new processing.PVector( ((Math.random() > 0.5)?-1:1)*Math.random(), ((Math.random() > 0.5)?-1:1)*Math.random());
          n.normalize();
          n.mult(ndist);
          pos = processing.PVector.add(com, n);
        }
        
        var particle = new Particle(
          $.extend({}, 
            options[result.category], 
            { // This object overrides the defaults defined in the 'options' variable
              pos: pos,
              result: result,
              // We select a random colour from our colour_options.
              colour: colour_options[result.category][Math.floor(Math.random()*colour_options[result.category].length)]
            }
          )
        );
        
        particles.push(particle);
      };
      
      processing.clearResults = function(){
        particles = [];
      };
      
      processing.setup = function(){
        for(var si = 0; si < data.length; si++){
          for(var ri = 0; ri<data[si].length; ri++){
            processing.addResult( data[si][ri]);
          }
        }

        processing.fill(255);
        processing.background(254,254,255);
        processing.noStroke();
      }
      
      processing.mouseClicked = function() { 
        
        if(selected){
         selected.unselect();
         hideInformation();
         selected = null;
         centerOfMass = null;
        }else{
          var nearest = null;
          var mouse = new processing.PVector(processing.mouseX, processing.mouseY);
          particles.forEach(function(particle){
            if(!nearest){ nearest = particle; }
            if(particle.pos.dist(mouse) < nearest.pos.dist(mouse) ){
              nearest = particle;
            }
          });
          nearest.select();
          showInformation(nearest);
          selected = nearest;
          
          var category = selected.result.category;
          var d;
          if(category == "personal"){ 
            d = 0; 
          }else if (category == "both"){
            d = 125;
          }else{
            d = 250;
          }
          var center_of_page = new processing.PVector(processing.width/2, processing.height/2);
          var from_selected_to_center =  processing.PVector.sub(center_of_page, selected.pos);
          from_selected_to_center.normalize();
          from_selected_to_center.mult(d);
          centerOfMass = processing.PVector.add(selected.pos, from_selected_to_center);
          
        }
       
      };
      
      processing.mouseMoved = function(){
        lastMoved = new Date().getTime();
      };
      
    }
  };

  var canvas = document.getElementById("canvas");

  var processing = null;

  chrome.storage.local.get("searches", function(store){

    var data = store.searches.map(results_to_scores);
    processing = new Processing(canvas, createSketch(data));
    
    $(window).on('resize', function(){
      $('body').css({width: $(window).width() ,height:$(window).height()});
      processing.size($(window).width(),$(window).height());
    });
    $('body').css({width: $(window).width() ,height:$(window).height()});
    processing.size($(window).width(),$(window).height());

  });
  
  
  chrome.storage.onChanged.addListener(function(changes, namespace) {
    if (processing && ("searches" in changes) && (namespace == "local") ){
      
      var storageChange = changes["searches"];
      var oldSearches = storageChange.oldValue;
      var newSearches = storageChange.newValue;
      
      if ( oldSearches.length < newSearches.length ){
        // We added a new search, add new items
                    var data = newSearches.map(results_to_scores);
        
        for(var si = oldSearches.length; si < data.length; si++){
          for(var ri = 0; ri < data[si].length; ri++){
            var result = data[si][ri];
            processing.addResult(result, true);

          }
        }
        
      }else{
        // Something else happened, redraw viz completely
        console.log("Don't know how to deal. Clearing changes.")
        processing.clearResults();
        
      }
        
    }
  });
  
  $('#clear').click(function(){
    chrome.storage.local.set({searches: []}, function(){
      console.log("Cleared local storage");
    });
  });
  
});

